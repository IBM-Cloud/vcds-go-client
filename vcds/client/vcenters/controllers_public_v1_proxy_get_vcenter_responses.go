// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyGetVcenterReader is a Reader for the ControllersPublicV1ProxyGetVcenter structure.
type ControllersPublicV1ProxyGetVcenterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyGetVcenterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyGetVcenterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewControllersPublicV1ProxyGetVcenterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyGetVcenterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyGetVcenterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyGetVcenterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyGetVcenterOK creates a ControllersPublicV1ProxyGetVcenterOK with default headers values
func NewControllersPublicV1ProxyGetVcenterOK() *ControllersPublicV1ProxyGetVcenterOK {
	return &ControllersPublicV1ProxyGetVcenterOK{}
}

/*ControllersPublicV1ProxyGetVcenterOK handles this case with default header values.

Success.
*/
type ControllersPublicV1ProxyGetVcenterOK struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.VcenterDetail
}

func (o *ControllersPublicV1ProxyGetVcenterOK) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyGetVcenterOK  %+v", 200, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.VcenterDetail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetVcenterUnauthorized creates a ControllersPublicV1ProxyGetVcenterUnauthorized with default headers values
func NewControllersPublicV1ProxyGetVcenterUnauthorized() *ControllersPublicV1ProxyGetVcenterUnauthorized {
	return &ControllersPublicV1ProxyGetVcenterUnauthorized{}
}

/*ControllersPublicV1ProxyGetVcenterUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyGetVcenterUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetVcenterUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyGetVcenterUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetVcenterForbidden creates a ControllersPublicV1ProxyGetVcenterForbidden with default headers values
func NewControllersPublicV1ProxyGetVcenterForbidden() *ControllersPublicV1ProxyGetVcenterForbidden {
	return &ControllersPublicV1ProxyGetVcenterForbidden{}
}

/*ControllersPublicV1ProxyGetVcenterForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyGetVcenterForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetVcenterForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyGetVcenterForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetVcenterNotFound creates a ControllersPublicV1ProxyGetVcenterNotFound with default headers values
func NewControllersPublicV1ProxyGetVcenterNotFound() *ControllersPublicV1ProxyGetVcenterNotFound {
	return &ControllersPublicV1ProxyGetVcenterNotFound{}
}

/*ControllersPublicV1ProxyGetVcenterNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyGetVcenterNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetVcenterNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyGetVcenterNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetVcenterInternalServerError creates a ControllersPublicV1ProxyGetVcenterInternalServerError with default headers values
func NewControllersPublicV1ProxyGetVcenterInternalServerError() *ControllersPublicV1ProxyGetVcenterInternalServerError {
	return &ControllersPublicV1ProxyGetVcenterInternalServerError{}
}

/*ControllersPublicV1ProxyGetVcenterInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyGetVcenterInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetVcenterInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyGetVcenterInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
