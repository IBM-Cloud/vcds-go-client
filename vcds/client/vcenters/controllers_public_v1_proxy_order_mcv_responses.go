// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyOrderMcvReader is a Reader for the ControllersPublicV1ProxyOrderMcv structure.
type ControllersPublicV1ProxyOrderMcvReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyOrderMcvReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyOrderMcvOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewControllersPublicV1ProxyOrderMcvAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllersPublicV1ProxyOrderMcvBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllersPublicV1ProxyOrderMcvUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyOrderMcvForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyOrderMcvInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyOrderMcvOK creates a ControllersPublicV1ProxyOrderMcvOK with default headers values
func NewControllersPublicV1ProxyOrderMcvOK() *ControllersPublicV1ProxyOrderMcvOK {
	return &ControllersPublicV1ProxyOrderMcvOK{}
}

/*ControllersPublicV1ProxyOrderMcvOK handles this case with default header values.

Success. The request has been successfully verified.
*/
type ControllersPublicV1ProxyOrderMcvOK struct {
}

func (o *ControllersPublicV1ProxyOrderMcvOK) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/mcv][%d] controllersPublicV1ProxyOrderMcvOK ", 200)
}

func (o *ControllersPublicV1ProxyOrderMcvOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyOrderMcvAccepted creates a ControllersPublicV1ProxyOrderMcvAccepted with default headers values
func NewControllersPublicV1ProxyOrderMcvAccepted() *ControllersPublicV1ProxyOrderMcvAccepted {
	return &ControllersPublicV1ProxyOrderMcvAccepted{}
}

/*ControllersPublicV1ProxyOrderMcvAccepted handles this case with default header values.

Success. The request for creating the Multi-Zone Stretched Cluster instance has been accepted.
*/
type ControllersPublicV1ProxyOrderMcvAccepted struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.VcenterOrderResponse
}

func (o *ControllersPublicV1ProxyOrderMcvAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/mcv][%d] controllersPublicV1ProxyOrderMcvAccepted  %+v", 202, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderMcvAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.VcenterOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderMcvBadRequest creates a ControllersPublicV1ProxyOrderMcvBadRequest with default headers values
func NewControllersPublicV1ProxyOrderMcvBadRequest() *ControllersPublicV1ProxyOrderMcvBadRequest {
	return &ControllersPublicV1ProxyOrderMcvBadRequest{}
}

/*ControllersPublicV1ProxyOrderMcvBadRequest handles this case with default header values.

Bad request. Check your request parameters.
*/
type ControllersPublicV1ProxyOrderMcvBadRequest struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderMcvBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/mcv][%d] controllersPublicV1ProxyOrderMcvBadRequest  %+v", 400, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderMcvBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderMcvUnauthorized creates a ControllersPublicV1ProxyOrderMcvUnauthorized with default headers values
func NewControllersPublicV1ProxyOrderMcvUnauthorized() *ControllersPublicV1ProxyOrderMcvUnauthorized {
	return &ControllersPublicV1ProxyOrderMcvUnauthorized{}
}

/*ControllersPublicV1ProxyOrderMcvUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyOrderMcvUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderMcvUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/mcv][%d] controllersPublicV1ProxyOrderMcvUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderMcvUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderMcvForbidden creates a ControllersPublicV1ProxyOrderMcvForbidden with default headers values
func NewControllersPublicV1ProxyOrderMcvForbidden() *ControllersPublicV1ProxyOrderMcvForbidden {
	return &ControllersPublicV1ProxyOrderMcvForbidden{}
}

/*ControllersPublicV1ProxyOrderMcvForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyOrderMcvForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderMcvForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/mcv][%d] controllersPublicV1ProxyOrderMcvForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderMcvForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderMcvInternalServerError creates a ControllersPublicV1ProxyOrderMcvInternalServerError with default headers values
func NewControllersPublicV1ProxyOrderMcvInternalServerError() *ControllersPublicV1ProxyOrderMcvInternalServerError {
	return &ControllersPublicV1ProxyOrderMcvInternalServerError{}
}

/*ControllersPublicV1ProxyOrderMcvInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyOrderMcvInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderMcvInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/mcv][%d] controllersPublicV1ProxyOrderMcvInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderMcvInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
