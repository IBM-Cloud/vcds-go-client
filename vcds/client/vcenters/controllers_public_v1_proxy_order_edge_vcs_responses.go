// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyOrderEdgeVcsReader is a Reader for the ControllersPublicV1ProxyOrderEdgeVcs structure.
type ControllersPublicV1ProxyOrderEdgeVcsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyOrderEdgeVcsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyOrderEdgeVcsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewControllersPublicV1ProxyOrderEdgeVcsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllersPublicV1ProxyOrderEdgeVcsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllersPublicV1ProxyOrderEdgeVcsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyOrderEdgeVcsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyOrderEdgeVcsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyOrderEdgeVcsOK creates a ControllersPublicV1ProxyOrderEdgeVcsOK with default headers values
func NewControllersPublicV1ProxyOrderEdgeVcsOK() *ControllersPublicV1ProxyOrderEdgeVcsOK {
	return &ControllersPublicV1ProxyOrderEdgeVcsOK{}
}

/*ControllersPublicV1ProxyOrderEdgeVcsOK handles this case with default header values.

Success. The request has been successfully verified.
*/
type ControllersPublicV1ProxyOrderEdgeVcsOK struct {
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsOK) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/edge][%d] controllersPublicV1ProxyOrderEdgeVcsOK ", 200)
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyOrderEdgeVcsAccepted creates a ControllersPublicV1ProxyOrderEdgeVcsAccepted with default headers values
func NewControllersPublicV1ProxyOrderEdgeVcsAccepted() *ControllersPublicV1ProxyOrderEdgeVcsAccepted {
	return &ControllersPublicV1ProxyOrderEdgeVcsAccepted{}
}

/*ControllersPublicV1ProxyOrderEdgeVcsAccepted handles this case with default header values.

Success. The request for creating the vCenter Server instance with NSX-T has been accepted.
*/
type ControllersPublicV1ProxyOrderEdgeVcsAccepted struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.VcenterOrderResponse
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/edge][%d] controllersPublicV1ProxyOrderEdgeVcsAccepted  %+v", 202, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.VcenterOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderEdgeVcsBadRequest creates a ControllersPublicV1ProxyOrderEdgeVcsBadRequest with default headers values
func NewControllersPublicV1ProxyOrderEdgeVcsBadRequest() *ControllersPublicV1ProxyOrderEdgeVcsBadRequest {
	return &ControllersPublicV1ProxyOrderEdgeVcsBadRequest{}
}

/*ControllersPublicV1ProxyOrderEdgeVcsBadRequest handles this case with default header values.

Bad request. Check your request parameters.
*/
type ControllersPublicV1ProxyOrderEdgeVcsBadRequest struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/edge][%d] controllersPublicV1ProxyOrderEdgeVcsBadRequest  %+v", 400, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderEdgeVcsUnauthorized creates a ControllersPublicV1ProxyOrderEdgeVcsUnauthorized with default headers values
func NewControllersPublicV1ProxyOrderEdgeVcsUnauthorized() *ControllersPublicV1ProxyOrderEdgeVcsUnauthorized {
	return &ControllersPublicV1ProxyOrderEdgeVcsUnauthorized{}
}

/*ControllersPublicV1ProxyOrderEdgeVcsUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyOrderEdgeVcsUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/edge][%d] controllersPublicV1ProxyOrderEdgeVcsUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderEdgeVcsForbidden creates a ControllersPublicV1ProxyOrderEdgeVcsForbidden with default headers values
func NewControllersPublicV1ProxyOrderEdgeVcsForbidden() *ControllersPublicV1ProxyOrderEdgeVcsForbidden {
	return &ControllersPublicV1ProxyOrderEdgeVcsForbidden{}
}

/*ControllersPublicV1ProxyOrderEdgeVcsForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyOrderEdgeVcsForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/edge][%d] controllersPublicV1ProxyOrderEdgeVcsForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderEdgeVcsInternalServerError creates a ControllersPublicV1ProxyOrderEdgeVcsInternalServerError with default headers values
func NewControllersPublicV1ProxyOrderEdgeVcsInternalServerError() *ControllersPublicV1ProxyOrderEdgeVcsInternalServerError {
	return &ControllersPublicV1ProxyOrderEdgeVcsInternalServerError{}
}

/*ControllersPublicV1ProxyOrderEdgeVcsInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyOrderEdgeVcsInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/edge][%d] controllersPublicV1ProxyOrderEdgeVcsInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderEdgeVcsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
