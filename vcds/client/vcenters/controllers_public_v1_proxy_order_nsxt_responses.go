// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyOrderNsxtReader is a Reader for the ControllersPublicV1ProxyOrderNsxt structure.
type ControllersPublicV1ProxyOrderNsxtReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyOrderNsxtReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyOrderNsxtOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewControllersPublicV1ProxyOrderNsxtAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllersPublicV1ProxyOrderNsxtBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllersPublicV1ProxyOrderNsxtUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyOrderNsxtForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyOrderNsxtInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyOrderNsxtOK creates a ControllersPublicV1ProxyOrderNsxtOK with default headers values
func NewControllersPublicV1ProxyOrderNsxtOK() *ControllersPublicV1ProxyOrderNsxtOK {
	return &ControllersPublicV1ProxyOrderNsxtOK{}
}

/*ControllersPublicV1ProxyOrderNsxtOK handles this case with default header values.

Success. The request has been successfully verified.
*/
type ControllersPublicV1ProxyOrderNsxtOK struct {
}

func (o *ControllersPublicV1ProxyOrderNsxtOK) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/nsxt][%d] controllersPublicV1ProxyOrderNsxtOK ", 200)
}

func (o *ControllersPublicV1ProxyOrderNsxtOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyOrderNsxtAccepted creates a ControllersPublicV1ProxyOrderNsxtAccepted with default headers values
func NewControllersPublicV1ProxyOrderNsxtAccepted() *ControllersPublicV1ProxyOrderNsxtAccepted {
	return &ControllersPublicV1ProxyOrderNsxtAccepted{}
}

/*ControllersPublicV1ProxyOrderNsxtAccepted handles this case with default header values.

Success. The request for creating the vCenter Server instance with NSX-T has been accepted.
*/
type ControllersPublicV1ProxyOrderNsxtAccepted struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.VcenterOrderResponse
}

func (o *ControllersPublicV1ProxyOrderNsxtAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/nsxt][%d] controllersPublicV1ProxyOrderNsxtAccepted  %+v", 202, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderNsxtAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.VcenterOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderNsxtBadRequest creates a ControllersPublicV1ProxyOrderNsxtBadRequest with default headers values
func NewControllersPublicV1ProxyOrderNsxtBadRequest() *ControllersPublicV1ProxyOrderNsxtBadRequest {
	return &ControllersPublicV1ProxyOrderNsxtBadRequest{}
}

/*ControllersPublicV1ProxyOrderNsxtBadRequest handles this case with default header values.

Bad request. Check your request parameters.
*/
type ControllersPublicV1ProxyOrderNsxtBadRequest struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderNsxtBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/nsxt][%d] controllersPublicV1ProxyOrderNsxtBadRequest  %+v", 400, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderNsxtBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderNsxtUnauthorized creates a ControllersPublicV1ProxyOrderNsxtUnauthorized with default headers values
func NewControllersPublicV1ProxyOrderNsxtUnauthorized() *ControllersPublicV1ProxyOrderNsxtUnauthorized {
	return &ControllersPublicV1ProxyOrderNsxtUnauthorized{}
}

/*ControllersPublicV1ProxyOrderNsxtUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyOrderNsxtUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderNsxtUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/nsxt][%d] controllersPublicV1ProxyOrderNsxtUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderNsxtUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderNsxtForbidden creates a ControllersPublicV1ProxyOrderNsxtForbidden with default headers values
func NewControllersPublicV1ProxyOrderNsxtForbidden() *ControllersPublicV1ProxyOrderNsxtForbidden {
	return &ControllersPublicV1ProxyOrderNsxtForbidden{}
}

/*ControllersPublicV1ProxyOrderNsxtForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyOrderNsxtForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderNsxtForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/nsxt][%d] controllersPublicV1ProxyOrderNsxtForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderNsxtForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderNsxtInternalServerError creates a ControllersPublicV1ProxyOrderNsxtInternalServerError with default headers values
func NewControllersPublicV1ProxyOrderNsxtInternalServerError() *ControllersPublicV1ProxyOrderNsxtInternalServerError {
	return &ControllersPublicV1ProxyOrderNsxtInternalServerError{}
}

/*ControllersPublicV1ProxyOrderNsxtInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyOrderNsxtInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderNsxtInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/nsxt][%d] controllersPublicV1ProxyOrderNsxtInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderNsxtInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
