// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyGetExistingNetworkForClusterReader is a Reader for the ControllersPublicV1ProxyGetExistingNetworkForCluster structure.
type ControllersPublicV1ProxyGetExistingNetworkForClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyGetExistingNetworkForClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyGetExistingNetworkForClusterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyGetExistingNetworkForClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyGetExistingNetworkForClusterOK creates a ControllersPublicV1ProxyGetExistingNetworkForClusterOK with default headers values
func NewControllersPublicV1ProxyGetExistingNetworkForClusterOK() *ControllersPublicV1ProxyGetExistingNetworkForClusterOK {
	return &ControllersPublicV1ProxyGetExistingNetworkForClusterOK{}
}

/*ControllersPublicV1ProxyGetExistingNetworkForClusterOK handles this case with default header values.

Success.
*/
type ControllersPublicV1ProxyGetExistingNetworkForClusterOK struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload models.ArrayExistingVlans
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterOK) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/clusters/{cluster_id}/existing_network][%d] controllersPublicV1ProxyGetExistingNetworkForClusterOK  %+v", 200, o.Payload)
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized creates a ControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized with default headers values
func NewControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized() *ControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized {
	return &ControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized{}
}

/*ControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/clusters/{cluster_id}/existing_network][%d] controllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetExistingNetworkForClusterForbidden creates a ControllersPublicV1ProxyGetExistingNetworkForClusterForbidden with default headers values
func NewControllersPublicV1ProxyGetExistingNetworkForClusterForbidden() *ControllersPublicV1ProxyGetExistingNetworkForClusterForbidden {
	return &ControllersPublicV1ProxyGetExistingNetworkForClusterForbidden{}
}

/*ControllersPublicV1ProxyGetExistingNetworkForClusterForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyGetExistingNetworkForClusterForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/clusters/{cluster_id}/existing_network][%d] controllersPublicV1ProxyGetExistingNetworkForClusterForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetExistingNetworkForClusterNotFound creates a ControllersPublicV1ProxyGetExistingNetworkForClusterNotFound with default headers values
func NewControllersPublicV1ProxyGetExistingNetworkForClusterNotFound() *ControllersPublicV1ProxyGetExistingNetworkForClusterNotFound {
	return &ControllersPublicV1ProxyGetExistingNetworkForClusterNotFound{}
}

/*ControllersPublicV1ProxyGetExistingNetworkForClusterNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyGetExistingNetworkForClusterNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/clusters/{cluster_id}/existing_network][%d] controllersPublicV1ProxyGetExistingNetworkForClusterNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError creates a ControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError with default headers values
func NewControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError() *ControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError {
	return &ControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError{}
}

/*ControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/clusters/{cluster_id}/existing_network][%d] controllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyGetExistingNetworkForClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
