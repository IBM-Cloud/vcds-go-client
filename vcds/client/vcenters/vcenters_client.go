// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new vcenters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vcenters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ControllersPublicV1ProxyAddVcenterHosts adds new hosts to a specified cluster

Add new hosts to a specified cluster for a specified vCenter Server instance.
*/
func (a *Client) ControllersPublicV1ProxyAddVcenterHosts(params *ControllersPublicV1ProxyAddVcenterHostsParams) (*ControllersPublicV1ProxyAddVcenterHostsOK, *ControllersPublicV1ProxyAddVcenterHostsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyAddVcenterHostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.add_vcenter_hosts",
		Method:             "POST",
		PathPattern:        "/v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyAddVcenterHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ControllersPublicV1ProxyAddVcenterHostsOK:
		return value, nil, nil
	case *ControllersPublicV1ProxyAddVcenterHostsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ControllersPublicV1ProxyAddVcenterNfsStorage adds shared storages to a specified cluster

Add new shared storages to a specified cluster for a specified vCenter Server instance.
*/
func (a *Client) ControllersPublicV1ProxyAddVcenterNfsStorage(params *ControllersPublicV1ProxyAddVcenterNfsStorageParams) (*ControllersPublicV1ProxyAddVcenterNfsStorageOK, *ControllersPublicV1ProxyAddVcenterNfsStorageAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyAddVcenterNfsStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.add_vcenter_nfs_storage",
		Method:             "POST",
		PathPattern:        "/v1/vcenters/{instance_id}/clusters/{cluster_id}/shared_storages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyAddVcenterNfsStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ControllersPublicV1ProxyAddVcenterNfsStorageOK:
		return value, nil, nil
	case *ControllersPublicV1ProxyAddVcenterNfsStorageAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ControllersPublicV1ProxyBatchDeleteVcenterHosts deletes hosts from a specified cluster

Delete hosts from a specified cluster for a specified vCenter Server instance.
*/
func (a *Client) ControllersPublicV1ProxyBatchDeleteVcenterHosts(params *ControllersPublicV1ProxyBatchDeleteVcenterHostsParams) (*ControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyBatchDeleteVcenterHostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.batch_delete_vcenter_hosts",
		Method:             "PATCH",
		PathPattern:        "/v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyBatchDeleteVcenterHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted), nil

}

/*
ControllersPublicV1ProxyBatchDeleteVcenterNfsStorage deletes n f s storages from a specified cluster

Delete Network File System (NFS) storages from a specified cluster for a specified vCenter Server instance.
*/
func (a *Client) ControllersPublicV1ProxyBatchDeleteVcenterNfsStorage(params *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageParams) (*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.batch_delete_vcenter_nfs_storage",
		Method:             "PATCH",
		PathPattern:        "/v1/vcenters/{instance_id}/clusters/{cluster_id}/shared_storages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted), nil

}

/*
ControllersPublicV1ProxyDeleteVcenter deletes a v center server instance

Delete a vCenter Server instance.
*/
func (a *Client) ControllersPublicV1ProxyDeleteVcenter(params *ControllersPublicV1ProxyDeleteVcenterParams) (*ControllersPublicV1ProxyDeleteVcenterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyDeleteVcenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.delete_vcenter",
		Method:             "DELETE",
		PathPattern:        "/v1/vcenters/{instance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyDeleteVcenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV1ProxyDeleteVcenterAccepted), nil

}

/*
ControllersPublicV1ProxyDeleteVcenterCluster deletes a cluster

Delete a specified cluster from a specified vCenter Server instance.
*/
func (a *Client) ControllersPublicV1ProxyDeleteVcenterCluster(params *ControllersPublicV1ProxyDeleteVcenterClusterParams) (*ControllersPublicV1ProxyDeleteVcenterClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyDeleteVcenterClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.delete_vcenter_cluster",
		Method:             "DELETE",
		PathPattern:        "/v1/vcenters/{instance_id}/clusters/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyDeleteVcenterClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV1ProxyDeleteVcenterClusterAccepted), nil

}

/*
ControllersPublicV1ProxyGetExistingNetworkForCluster retrieves the existing network of a cluster

Retrieve the existing network of a specified cluster.
*/
func (a *Client) ControllersPublicV1ProxyGetExistingNetworkForCluster(params *ControllersPublicV1ProxyGetExistingNetworkForClusterParams) (*ControllersPublicV1ProxyGetExistingNetworkForClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyGetExistingNetworkForClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.get_existing_network_for_cluster",
		Method:             "GET",
		PathPattern:        "/v1/vcenters/{instance_id}/clusters/{cluster_id}/existing_network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyGetExistingNetworkForClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV1ProxyGetExistingNetworkForClusterOK), nil

}

/*
ControllersPublicV1ProxyGetVcenter retrieves the detailed information of a v center server instance

Retrieve the detailed information of a vCenter Server instance.
*/
func (a *Client) ControllersPublicV1ProxyGetVcenter(params *ControllersPublicV1ProxyGetVcenterParams) (*ControllersPublicV1ProxyGetVcenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyGetVcenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.get_vcenter",
		Method:             "GET",
		PathPattern:        "/v1/vcenters/{instance_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyGetVcenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV1ProxyGetVcenterOK), nil

}

/*
ControllersPublicV1ProxyGetVcenterCluster retrieves the detailed information of a cluster

Retrieve the detailed information of a specified cluster deployed in a specified vCenter Server instance.
*/
func (a *Client) ControllersPublicV1ProxyGetVcenterCluster(params *ControllersPublicV1ProxyGetVcenterClusterParams) (*ControllersPublicV1ProxyGetVcenterClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyGetVcenterClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.get_vcenter_cluster",
		Method:             "GET",
		PathPattern:        "/v1/vcenters/{instance_id}/clusters/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyGetVcenterClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV1ProxyGetVcenterClusterOK), nil

}

/*
ControllersPublicV1ProxyOrderEdgeVcs orders a new v center server instance with an edge services cluster or verify the order

Order a new vCenter Server instance with edge services cluster or verify the order with specified configurations.
*/
func (a *Client) ControllersPublicV1ProxyOrderEdgeVcs(params *ControllersPublicV1ProxyOrderEdgeVcsParams) (*ControllersPublicV1ProxyOrderEdgeVcsOK, *ControllersPublicV1ProxyOrderEdgeVcsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyOrderEdgeVcsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.order_edge_vcs",
		Method:             "POST",
		PathPattern:        "/v1/vcenters/edge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyOrderEdgeVcsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ControllersPublicV1ProxyOrderEdgeVcsOK:
		return value, nil, nil
	case *ControllersPublicV1ProxyOrderEdgeVcsAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ControllersPublicV1ProxyOrderMcv orders a new multi zone stretched cluster instance or verify the order

Order a new multi-zone stretched cluster instance or verify the order with specified configurations.
*/
func (a *Client) ControllersPublicV1ProxyOrderMcv(params *ControllersPublicV1ProxyOrderMcvParams) (*ControllersPublicV1ProxyOrderMcvOK, *ControllersPublicV1ProxyOrderMcvAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyOrderMcvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.order_mcv",
		Method:             "POST",
		PathPattern:        "/v1/vcenters/mcv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyOrderMcvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ControllersPublicV1ProxyOrderMcvOK:
		return value, nil, nil
	case *ControllersPublicV1ProxyOrderMcvAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ControllersPublicV1ProxyOrderNsxt orders a new v center server instance with n s x t or verify the order

Order a new vCenter Server instance with NSX-T or verify the order with specified configurations.
*/
func (a *Client) ControllersPublicV1ProxyOrderNsxt(params *ControllersPublicV1ProxyOrderNsxtParams) (*ControllersPublicV1ProxyOrderNsxtOK, *ControllersPublicV1ProxyOrderNsxtAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyOrderNsxtParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.order_nsxt",
		Method:             "POST",
		PathPattern:        "/v1/vcenters/nsxt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyOrderNsxtReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ControllersPublicV1ProxyOrderNsxtOK:
		return value, nil, nil
	case *ControllersPublicV1ProxyOrderNsxtAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ControllersPublicV1ProxyOrderVcenter orders a new v center server instance or verify the order

Order a new vCenter Server instance or verify the order with specified configurations.
*/
func (a *Client) ControllersPublicV1ProxyOrderVcenter(params *ControllersPublicV1ProxyOrderVcenterParams) (*ControllersPublicV1ProxyOrderVcenterOK, *ControllersPublicV1ProxyOrderVcenterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyOrderVcenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.order_vcenter",
		Method:             "POST",
		PathPattern:        "/v1/vcenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyOrderVcenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ControllersPublicV1ProxyOrderVcenterOK:
		return value, nil, nil
	case *ControllersPublicV1ProxyOrderVcenterAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ControllersPublicV1ProxyOrderVcenterCluster adds a cluster for a specified v center server instance or verify the order

Add a cluster for a specified vCenter Server instance or verify the order.
*/
func (a *Client) ControllersPublicV1ProxyOrderVcenterCluster(params *ControllersPublicV1ProxyOrderVcenterClusterParams) (*ControllersPublicV1ProxyOrderVcenterClusterOK, *ControllersPublicV1ProxyOrderVcenterClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyOrderVcenterClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.order_vcenter_cluster",
		Method:             "POST",
		PathPattern:        "/v1/vcenters/{instance_id}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyOrderVcenterClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ControllersPublicV1ProxyOrderVcenterClusterOK:
		return value, nil, nil
	case *ControllersPublicV1ProxyOrderVcenterClusterAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
ControllersPublicV2ProxyGetVcenterHistoryMessages lists all history messages for a specified v center server instance as a JSON object

List all the history messages in a specified vCenter Server instance within the specified time frame. If the history messages are obtained, the key name is "history_messages". Otherwise the key name is "errors".
*/
func (a *Client) ControllersPublicV2ProxyGetVcenterHistoryMessages(params *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) (*ControllersPublicV2ProxyGetVcenterHistoryMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyGetVcenterHistoryMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.get_vcenter_history_messages",
		Method:             "GET",
		PathPattern:        "/v2/vcenters/{instance_id}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyGetVcenterHistoryMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyGetVcenterHistoryMessagesOK), nil

}

/*
ControllersPublicV2ProxyGetVlansForCluster retrieves the detailed network interface of a cluster as a JSON object

Retrieve the detailed information of network interface for a specified cluster as a JSON object. If the detailed network interface information is obtained, the key name is "array_vlans". Otherwise the key name is "errors".
*/
func (a *Client) ControllersPublicV2ProxyGetVlansForCluster(params *ControllersPublicV2ProxyGetVlansForClusterParams) (*ControllersPublicV2ProxyGetVlansForClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyGetVlansForClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.get_vlans_for_cluster",
		Method:             "GET",
		PathPattern:        "/v2/vcenters/{instance_id}/clusters/{cluster_id}/vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyGetVlansForClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyGetVlansForClusterOK), nil

}

/*
ControllersPublicV2ProxyListVcenterClusters lists all the clusters for a specified v center server instance as a JSON object

List all the clusters that are deployed in a specified vCenter Server instance as a JSON object. If the clusters are obtained, the key name is "clusters". Otherwise the key name is "errors".
*/
func (a *Client) ControllersPublicV2ProxyListVcenterClusters(params *ControllersPublicV2ProxyListVcenterClustersParams) (*ControllersPublicV2ProxyListVcenterClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListVcenterClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_vcenter_clusters",
		Method:             "GET",
		PathPattern:        "/v2/vcenters/{instance_id}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListVcenterClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListVcenterClustersOK), nil

}

/*
ControllersPublicV2ProxyListVcenters lists all v center server instances as a JSON object

List all the vCenter Server instances that the user can access. The key name is "vcenters".
*/
func (a *Client) ControllersPublicV2ProxyListVcenters(params *ControllersPublicV2ProxyListVcentersParams) (*ControllersPublicV2ProxyListVcentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListVcentersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_vcenters",
		Method:             "GET",
		PathPattern:        "/v2/vcenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListVcentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListVcentersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
