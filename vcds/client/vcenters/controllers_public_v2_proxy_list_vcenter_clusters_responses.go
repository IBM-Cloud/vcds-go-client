// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV2ProxyListVcenterClustersReader is a Reader for the ControllersPublicV2ProxyListVcenterClusters structure.
type ControllersPublicV2ProxyListVcenterClustersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV2ProxyListVcenterClustersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV2ProxyListVcenterClustersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewControllersPublicV2ProxyListVcenterClustersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV2ProxyListVcenterClustersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV2ProxyListVcenterClustersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV2ProxyListVcenterClustersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV2ProxyListVcenterClustersOK creates a ControllersPublicV2ProxyListVcenterClustersOK with default headers values
func NewControllersPublicV2ProxyListVcenterClustersOK() *ControllersPublicV2ProxyListVcenterClustersOK {
	return &ControllersPublicV2ProxyListVcenterClustersOK{}
}

/*ControllersPublicV2ProxyListVcenterClustersOK handles this case with default header values.

Success.
*/
type ControllersPublicV2ProxyListVcenterClustersOK struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.DefClusters
}

func (o *ControllersPublicV2ProxyListVcenterClustersOK) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters][%d] controllersPublicV2ProxyListVcenterClustersOK  %+v", 200, o.Payload)
}

func (o *ControllersPublicV2ProxyListVcenterClustersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.DefClusters)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV2ProxyListVcenterClustersUnauthorized creates a ControllersPublicV2ProxyListVcenterClustersUnauthorized with default headers values
func NewControllersPublicV2ProxyListVcenterClustersUnauthorized() *ControllersPublicV2ProxyListVcenterClustersUnauthorized {
	return &ControllersPublicV2ProxyListVcenterClustersUnauthorized{}
}

/*ControllersPublicV2ProxyListVcenterClustersUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV2ProxyListVcenterClustersUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV2ProxyListVcenterClustersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters][%d] controllersPublicV2ProxyListVcenterClustersUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV2ProxyListVcenterClustersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV2ProxyListVcenterClustersForbidden creates a ControllersPublicV2ProxyListVcenterClustersForbidden with default headers values
func NewControllersPublicV2ProxyListVcenterClustersForbidden() *ControllersPublicV2ProxyListVcenterClustersForbidden {
	return &ControllersPublicV2ProxyListVcenterClustersForbidden{}
}

/*ControllersPublicV2ProxyListVcenterClustersForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV2ProxyListVcenterClustersForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV2ProxyListVcenterClustersForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters][%d] controllersPublicV2ProxyListVcenterClustersForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV2ProxyListVcenterClustersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV2ProxyListVcenterClustersNotFound creates a ControllersPublicV2ProxyListVcenterClustersNotFound with default headers values
func NewControllersPublicV2ProxyListVcenterClustersNotFound() *ControllersPublicV2ProxyListVcenterClustersNotFound {
	return &ControllersPublicV2ProxyListVcenterClustersNotFound{}
}

/*ControllersPublicV2ProxyListVcenterClustersNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV2ProxyListVcenterClustersNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV2ProxyListVcenterClustersNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters][%d] controllersPublicV2ProxyListVcenterClustersNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV2ProxyListVcenterClustersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV2ProxyListVcenterClustersInternalServerError creates a ControllersPublicV2ProxyListVcenterClustersInternalServerError with default headers values
func NewControllersPublicV2ProxyListVcenterClustersInternalServerError() *ControllersPublicV2ProxyListVcenterClustersInternalServerError {
	return &ControllersPublicV2ProxyListVcenterClustersInternalServerError{}
}

/*ControllersPublicV2ProxyListVcenterClustersInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV2ProxyListVcenterClustersInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV2ProxyListVcenterClustersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters][%d] controllersPublicV2ProxyListVcenterClustersInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV2ProxyListVcenterClustersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
