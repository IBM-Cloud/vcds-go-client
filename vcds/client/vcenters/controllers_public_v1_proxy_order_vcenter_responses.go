// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyOrderVcenterReader is a Reader for the ControllersPublicV1ProxyOrderVcenter structure.
type ControllersPublicV1ProxyOrderVcenterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyOrderVcenterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyOrderVcenterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewControllersPublicV1ProxyOrderVcenterAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllersPublicV1ProxyOrderVcenterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllersPublicV1ProxyOrderVcenterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyOrderVcenterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyOrderVcenterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyOrderVcenterOK creates a ControllersPublicV1ProxyOrderVcenterOK with default headers values
func NewControllersPublicV1ProxyOrderVcenterOK() *ControllersPublicV1ProxyOrderVcenterOK {
	return &ControllersPublicV1ProxyOrderVcenterOK{}
}

/*ControllersPublicV1ProxyOrderVcenterOK handles this case with default header values.

Success. The request has been successfully verified.
*/
type ControllersPublicV1ProxyOrderVcenterOK struct {
}

func (o *ControllersPublicV1ProxyOrderVcenterOK) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters][%d] controllersPublicV1ProxyOrderVcenterOK ", 200)
}

func (o *ControllersPublicV1ProxyOrderVcenterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterAccepted creates a ControllersPublicV1ProxyOrderVcenterAccepted with default headers values
func NewControllersPublicV1ProxyOrderVcenterAccepted() *ControllersPublicV1ProxyOrderVcenterAccepted {
	return &ControllersPublicV1ProxyOrderVcenterAccepted{}
}

/*ControllersPublicV1ProxyOrderVcenterAccepted handles this case with default header values.

Success. The request for creating the vCenter Server instance has been accepted.
*/
type ControllersPublicV1ProxyOrderVcenterAccepted struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.VcenterOrderResponse
}

func (o *ControllersPublicV1ProxyOrderVcenterAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters][%d] controllersPublicV1ProxyOrderVcenterAccepted  %+v", 202, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.VcenterOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterBadRequest creates a ControllersPublicV1ProxyOrderVcenterBadRequest with default headers values
func NewControllersPublicV1ProxyOrderVcenterBadRequest() *ControllersPublicV1ProxyOrderVcenterBadRequest {
	return &ControllersPublicV1ProxyOrderVcenterBadRequest{}
}

/*ControllersPublicV1ProxyOrderVcenterBadRequest handles this case with default header values.

Bad request. Check your request parameters.
*/
type ControllersPublicV1ProxyOrderVcenterBadRequest struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderVcenterBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters][%d] controllersPublicV1ProxyOrderVcenterBadRequest  %+v", 400, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterUnauthorized creates a ControllersPublicV1ProxyOrderVcenterUnauthorized with default headers values
func NewControllersPublicV1ProxyOrderVcenterUnauthorized() *ControllersPublicV1ProxyOrderVcenterUnauthorized {
	return &ControllersPublicV1ProxyOrderVcenterUnauthorized{}
}

/*ControllersPublicV1ProxyOrderVcenterUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyOrderVcenterUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderVcenterUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters][%d] controllersPublicV1ProxyOrderVcenterUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterForbidden creates a ControllersPublicV1ProxyOrderVcenterForbidden with default headers values
func NewControllersPublicV1ProxyOrderVcenterForbidden() *ControllersPublicV1ProxyOrderVcenterForbidden {
	return &ControllersPublicV1ProxyOrderVcenterForbidden{}
}

/*ControllersPublicV1ProxyOrderVcenterForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyOrderVcenterForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderVcenterForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters][%d] controllersPublicV1ProxyOrderVcenterForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterInternalServerError creates a ControllersPublicV1ProxyOrderVcenterInternalServerError with default headers values
func NewControllersPublicV1ProxyOrderVcenterInternalServerError() *ControllersPublicV1ProxyOrderVcenterInternalServerError {
	return &ControllersPublicV1ProxyOrderVcenterInternalServerError{}
}

/*ControllersPublicV1ProxyOrderVcenterInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyOrderVcenterInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderVcenterInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters][%d] controllersPublicV1ProxyOrderVcenterInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
