// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageReader is a Reader for the ControllersPublicV1ProxyBatchDeleteVcenterNfsStorage structure.
type ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted creates a ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted() *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted {
	return &ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted handles this case with default header values.

Success. The request for deleting the specified nfs storage has been accepted.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted struct {
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/shared_storages][%d] controllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted ", 202)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest creates a ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest() *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest {
	return &ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest handles this case with default header values.

Bad request. Check your request parameters.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/shared_storages][%d] controllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest  %+v", 400, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized creates a ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized() *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized {
	return &ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/shared_storages][%d] controllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden creates a ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden() *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden {
	return &ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/shared_storages][%d] controllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound creates a ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound() *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound {
	return &ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/shared_storages][%d] controllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict creates a ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict() *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict {
	return &ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict handles this case with default header values.

Conflict. The request cannot be completed because of a conflict with the current state of the target resource.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/shared_storages][%d] controllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict  %+v", 409, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError creates a ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError() *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError {
	return &ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/shared_storages][%d] controllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody controllers public v1 proxy batch delete vcenter nfs storage body
swagger:model ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody
*/
type ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody struct {

	// Action to be performed against the specified shared storages. 'delete' is the only supported value.
	// Required: true
	// Enum: [delete]
	Action *string `json:"action"`

	// List of NFS storage IDs to be deleted. Delete these specified storages from a specified cluster.
	// Required: true
	StorageIds []string `json:"storage_ids"`
}

// Validate validates this controllers public v1 proxy batch delete vcenter nfs storage body
func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStorageIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var controllersPublicV1ProxyBatchDeleteVcenterNfsStorageBodyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		controllersPublicV1ProxyBatchDeleteVcenterNfsStorageBodyTypeActionPropEnum = append(controllersPublicV1ProxyBatchDeleteVcenterNfsStorageBodyTypeActionPropEnum, v)
	}
}

const (

	// ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBodyActionDelete captures enum value "delete"
	ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBodyActionDelete string = "delete"
)

// prop value enum
func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, controllersPublicV1ProxyBatchDeleteVcenterNfsStorageBodyTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("nfs_delete_data"+"."+"action", "body", o.Action); err != nil {
		return err
	}

	// value enum
	if err := o.validateActionEnum("nfs_delete_data"+"."+"action", "body", *o.Action); err != nil {
		return err
	}

	return nil
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody) validateStorageIds(formats strfmt.Registry) error {

	if err := validate.Required("nfs_delete_data"+"."+"storage_ids", "body", o.StorageIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody) UnmarshalBinary(b []byte) error {
	var res ControllersPublicV1ProxyBatchDeleteVcenterNfsStorageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
