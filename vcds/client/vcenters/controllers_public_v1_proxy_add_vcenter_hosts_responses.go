// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyAddVcenterHostsReader is a Reader for the ControllersPublicV1ProxyAddVcenterHosts structure.
type ControllersPublicV1ProxyAddVcenterHostsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyAddVcenterHostsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyAddVcenterHostsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewControllersPublicV1ProxyAddVcenterHostsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllersPublicV1ProxyAddVcenterHostsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllersPublicV1ProxyAddVcenterHostsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyAddVcenterHostsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyAddVcenterHostsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewControllersPublicV1ProxyAddVcenterHostsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyAddVcenterHostsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyAddVcenterHostsOK creates a ControllersPublicV1ProxyAddVcenterHostsOK with default headers values
func NewControllersPublicV1ProxyAddVcenterHostsOK() *ControllersPublicV1ProxyAddVcenterHostsOK {
	return &ControllersPublicV1ProxyAddVcenterHostsOK{}
}

/*ControllersPublicV1ProxyAddVcenterHostsOK handles this case with default header values.

Success. The request has been successfully verified.
*/
type ControllersPublicV1ProxyAddVcenterHostsOK struct {
}

func (o *ControllersPublicV1ProxyAddVcenterHostsOK) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyAddVcenterHostsOK ", 200)
}

func (o *ControllersPublicV1ProxyAddVcenterHostsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyAddVcenterHostsAccepted creates a ControllersPublicV1ProxyAddVcenterHostsAccepted with default headers values
func NewControllersPublicV1ProxyAddVcenterHostsAccepted() *ControllersPublicV1ProxyAddVcenterHostsAccepted {
	return &ControllersPublicV1ProxyAddVcenterHostsAccepted{}
}

/*ControllersPublicV1ProxyAddVcenterHostsAccepted handles this case with default header values.

Success. The request for adding new hosts has been accepted.
*/
type ControllersPublicV1ProxyAddVcenterHostsAccepted struct {
}

func (o *ControllersPublicV1ProxyAddVcenterHostsAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyAddVcenterHostsAccepted ", 202)
}

func (o *ControllersPublicV1ProxyAddVcenterHostsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyAddVcenterHostsBadRequest creates a ControllersPublicV1ProxyAddVcenterHostsBadRequest with default headers values
func NewControllersPublicV1ProxyAddVcenterHostsBadRequest() *ControllersPublicV1ProxyAddVcenterHostsBadRequest {
	return &ControllersPublicV1ProxyAddVcenterHostsBadRequest{}
}

/*ControllersPublicV1ProxyAddVcenterHostsBadRequest handles this case with default header values.

Bad request. Check your request parameters.
*/
type ControllersPublicV1ProxyAddVcenterHostsBadRequest struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyAddVcenterHostsBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyAddVcenterHostsBadRequest  %+v", 400, o.Payload)
}

func (o *ControllersPublicV1ProxyAddVcenterHostsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyAddVcenterHostsUnauthorized creates a ControllersPublicV1ProxyAddVcenterHostsUnauthorized with default headers values
func NewControllersPublicV1ProxyAddVcenterHostsUnauthorized() *ControllersPublicV1ProxyAddVcenterHostsUnauthorized {
	return &ControllersPublicV1ProxyAddVcenterHostsUnauthorized{}
}

/*ControllersPublicV1ProxyAddVcenterHostsUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyAddVcenterHostsUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyAddVcenterHostsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyAddVcenterHostsUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyAddVcenterHostsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyAddVcenterHostsForbidden creates a ControllersPublicV1ProxyAddVcenterHostsForbidden with default headers values
func NewControllersPublicV1ProxyAddVcenterHostsForbidden() *ControllersPublicV1ProxyAddVcenterHostsForbidden {
	return &ControllersPublicV1ProxyAddVcenterHostsForbidden{}
}

/*ControllersPublicV1ProxyAddVcenterHostsForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyAddVcenterHostsForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyAddVcenterHostsForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyAddVcenterHostsForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyAddVcenterHostsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyAddVcenterHostsNotFound creates a ControllersPublicV1ProxyAddVcenterHostsNotFound with default headers values
func NewControllersPublicV1ProxyAddVcenterHostsNotFound() *ControllersPublicV1ProxyAddVcenterHostsNotFound {
	return &ControllersPublicV1ProxyAddVcenterHostsNotFound{}
}

/*ControllersPublicV1ProxyAddVcenterHostsNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyAddVcenterHostsNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyAddVcenterHostsNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyAddVcenterHostsNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyAddVcenterHostsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyAddVcenterHostsConflict creates a ControllersPublicV1ProxyAddVcenterHostsConflict with default headers values
func NewControllersPublicV1ProxyAddVcenterHostsConflict() *ControllersPublicV1ProxyAddVcenterHostsConflict {
	return &ControllersPublicV1ProxyAddVcenterHostsConflict{}
}

/*ControllersPublicV1ProxyAddVcenterHostsConflict handles this case with default header values.

Conflict. The request cannot be completed because of a conflict with the current state of the target resource.
*/
type ControllersPublicV1ProxyAddVcenterHostsConflict struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyAddVcenterHostsConflict) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyAddVcenterHostsConflict  %+v", 409, o.Payload)
}

func (o *ControllersPublicV1ProxyAddVcenterHostsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyAddVcenterHostsInternalServerError creates a ControllersPublicV1ProxyAddVcenterHostsInternalServerError with default headers values
func NewControllersPublicV1ProxyAddVcenterHostsInternalServerError() *ControllersPublicV1ProxyAddVcenterHostsInternalServerError {
	return &ControllersPublicV1ProxyAddVcenterHostsInternalServerError{}
}

/*ControllersPublicV1ProxyAddVcenterHostsInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyAddVcenterHostsInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyAddVcenterHostsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyAddVcenterHostsInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyAddVcenterHostsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
