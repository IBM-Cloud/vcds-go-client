// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyDeleteVcenterReader is a Reader for the ControllersPublicV1ProxyDeleteVcenter structure.
type ControllersPublicV1ProxyDeleteVcenterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyDeleteVcenterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewControllersPublicV1ProxyDeleteVcenterAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewControllersPublicV1ProxyDeleteVcenterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyDeleteVcenterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyDeleteVcenterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyDeleteVcenterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyDeleteVcenterAccepted creates a ControllersPublicV1ProxyDeleteVcenterAccepted with default headers values
func NewControllersPublicV1ProxyDeleteVcenterAccepted() *ControllersPublicV1ProxyDeleteVcenterAccepted {
	return &ControllersPublicV1ProxyDeleteVcenterAccepted{}
}

/*ControllersPublicV1ProxyDeleteVcenterAccepted handles this case with default header values.

Success. The request for deleting the vCenter Server instance has been accepted.
*/
type ControllersPublicV1ProxyDeleteVcenterAccepted struct {
}

func (o *ControllersPublicV1ProxyDeleteVcenterAccepted) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyDeleteVcenterAccepted ", 202)
}

func (o *ControllersPublicV1ProxyDeleteVcenterAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyDeleteVcenterUnauthorized creates a ControllersPublicV1ProxyDeleteVcenterUnauthorized with default headers values
func NewControllersPublicV1ProxyDeleteVcenterUnauthorized() *ControllersPublicV1ProxyDeleteVcenterUnauthorized {
	return &ControllersPublicV1ProxyDeleteVcenterUnauthorized{}
}

/*ControllersPublicV1ProxyDeleteVcenterUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyDeleteVcenterUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyDeleteVcenterUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyDeleteVcenterUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyDeleteVcenterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyDeleteVcenterForbidden creates a ControllersPublicV1ProxyDeleteVcenterForbidden with default headers values
func NewControllersPublicV1ProxyDeleteVcenterForbidden() *ControllersPublicV1ProxyDeleteVcenterForbidden {
	return &ControllersPublicV1ProxyDeleteVcenterForbidden{}
}

/*ControllersPublicV1ProxyDeleteVcenterForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyDeleteVcenterForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyDeleteVcenterForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyDeleteVcenterForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyDeleteVcenterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyDeleteVcenterNotFound creates a ControllersPublicV1ProxyDeleteVcenterNotFound with default headers values
func NewControllersPublicV1ProxyDeleteVcenterNotFound() *ControllersPublicV1ProxyDeleteVcenterNotFound {
	return &ControllersPublicV1ProxyDeleteVcenterNotFound{}
}

/*ControllersPublicV1ProxyDeleteVcenterNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyDeleteVcenterNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyDeleteVcenterNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyDeleteVcenterNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyDeleteVcenterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyDeleteVcenterInternalServerError creates a ControllersPublicV1ProxyDeleteVcenterInternalServerError with default headers values
func NewControllersPublicV1ProxyDeleteVcenterInternalServerError() *ControllersPublicV1ProxyDeleteVcenterInternalServerError {
	return &ControllersPublicV1ProxyDeleteVcenterInternalServerError{}
}

/*ControllersPublicV1ProxyDeleteVcenterInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyDeleteVcenterInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyDeleteVcenterInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcenters/{instance_id}][%d] controllersPublicV1ProxyDeleteVcenterInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyDeleteVcenterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
