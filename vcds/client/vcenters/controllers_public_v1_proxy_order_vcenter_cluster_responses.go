// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyOrderVcenterClusterReader is a Reader for the ControllersPublicV1ProxyOrderVcenterCluster structure.
type ControllersPublicV1ProxyOrderVcenterClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyOrderVcenterClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyOrderVcenterClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewControllersPublicV1ProxyOrderVcenterClusterAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllersPublicV1ProxyOrderVcenterClusterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllersPublicV1ProxyOrderVcenterClusterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyOrderVcenterClusterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyOrderVcenterClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyOrderVcenterClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyOrderVcenterClusterOK creates a ControllersPublicV1ProxyOrderVcenterClusterOK with default headers values
func NewControllersPublicV1ProxyOrderVcenterClusterOK() *ControllersPublicV1ProxyOrderVcenterClusterOK {
	return &ControllersPublicV1ProxyOrderVcenterClusterOK{}
}

/*ControllersPublicV1ProxyOrderVcenterClusterOK handles this case with default header values.

Success. The request has been successfully verified.
*/
type ControllersPublicV1ProxyOrderVcenterClusterOK struct {
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterOK) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters][%d] controllersPublicV1ProxyOrderVcenterClusterOK ", 200)
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterClusterAccepted creates a ControllersPublicV1ProxyOrderVcenterClusterAccepted with default headers values
func NewControllersPublicV1ProxyOrderVcenterClusterAccepted() *ControllersPublicV1ProxyOrderVcenterClusterAccepted {
	return &ControllersPublicV1ProxyOrderVcenterClusterAccepted{}
}

/*ControllersPublicV1ProxyOrderVcenterClusterAccepted handles this case with default header values.

Success. The request for adding the new cluster has been accepted.
*/
type ControllersPublicV1ProxyOrderVcenterClusterAccepted struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.ClusterOrderResponse
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters][%d] controllersPublicV1ProxyOrderVcenterClusterAccepted  %+v", 202, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.ClusterOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterClusterBadRequest creates a ControllersPublicV1ProxyOrderVcenterClusterBadRequest with default headers values
func NewControllersPublicV1ProxyOrderVcenterClusterBadRequest() *ControllersPublicV1ProxyOrderVcenterClusterBadRequest {
	return &ControllersPublicV1ProxyOrderVcenterClusterBadRequest{}
}

/*ControllersPublicV1ProxyOrderVcenterClusterBadRequest handles this case with default header values.

Bad request. Check your request parameters.
*/
type ControllersPublicV1ProxyOrderVcenterClusterBadRequest struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters][%d] controllersPublicV1ProxyOrderVcenterClusterBadRequest  %+v", 400, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterClusterUnauthorized creates a ControllersPublicV1ProxyOrderVcenterClusterUnauthorized with default headers values
func NewControllersPublicV1ProxyOrderVcenterClusterUnauthorized() *ControllersPublicV1ProxyOrderVcenterClusterUnauthorized {
	return &ControllersPublicV1ProxyOrderVcenterClusterUnauthorized{}
}

/*ControllersPublicV1ProxyOrderVcenterClusterUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyOrderVcenterClusterUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters][%d] controllersPublicV1ProxyOrderVcenterClusterUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterClusterForbidden creates a ControllersPublicV1ProxyOrderVcenterClusterForbidden with default headers values
func NewControllersPublicV1ProxyOrderVcenterClusterForbidden() *ControllersPublicV1ProxyOrderVcenterClusterForbidden {
	return &ControllersPublicV1ProxyOrderVcenterClusterForbidden{}
}

/*ControllersPublicV1ProxyOrderVcenterClusterForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyOrderVcenterClusterForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters][%d] controllersPublicV1ProxyOrderVcenterClusterForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterClusterNotFound creates a ControllersPublicV1ProxyOrderVcenterClusterNotFound with default headers values
func NewControllersPublicV1ProxyOrderVcenterClusterNotFound() *ControllersPublicV1ProxyOrderVcenterClusterNotFound {
	return &ControllersPublicV1ProxyOrderVcenterClusterNotFound{}
}

/*ControllersPublicV1ProxyOrderVcenterClusterNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyOrderVcenterClusterNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters][%d] controllersPublicV1ProxyOrderVcenterClusterNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyOrderVcenterClusterInternalServerError creates a ControllersPublicV1ProxyOrderVcenterClusterInternalServerError with default headers values
func NewControllersPublicV1ProxyOrderVcenterClusterInternalServerError() *ControllersPublicV1ProxyOrderVcenterClusterInternalServerError {
	return &ControllersPublicV1ProxyOrderVcenterClusterInternalServerError{}
}

/*ControllersPublicV1ProxyOrderVcenterClusterInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyOrderVcenterClusterInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/vcenters/{instance_id}/clusters][%d] controllersPublicV1ProxyOrderVcenterClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyOrderVcenterClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
