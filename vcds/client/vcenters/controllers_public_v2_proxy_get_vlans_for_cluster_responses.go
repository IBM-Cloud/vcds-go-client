// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV2ProxyGetVlansForClusterReader is a Reader for the ControllersPublicV2ProxyGetVlansForCluster structure.
type ControllersPublicV2ProxyGetVlansForClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV2ProxyGetVlansForClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV2ProxyGetVlansForClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewControllersPublicV2ProxyGetVlansForClusterUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV2ProxyGetVlansForClusterForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV2ProxyGetVlansForClusterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV2ProxyGetVlansForClusterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV2ProxyGetVlansForClusterOK creates a ControllersPublicV2ProxyGetVlansForClusterOK with default headers values
func NewControllersPublicV2ProxyGetVlansForClusterOK() *ControllersPublicV2ProxyGetVlansForClusterOK {
	return &ControllersPublicV2ProxyGetVlansForClusterOK{}
}

/*ControllersPublicV2ProxyGetVlansForClusterOK handles this case with default header values.

Success.
*/
type ControllersPublicV2ProxyGetVlansForClusterOK struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.DefArrayVlans
}

func (o *ControllersPublicV2ProxyGetVlansForClusterOK) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters/{cluster_id}/vlans][%d] controllersPublicV2ProxyGetVlansForClusterOK  %+v", 200, o.Payload)
}

func (o *ControllersPublicV2ProxyGetVlansForClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.DefArrayVlans)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV2ProxyGetVlansForClusterUnauthorized creates a ControllersPublicV2ProxyGetVlansForClusterUnauthorized with default headers values
func NewControllersPublicV2ProxyGetVlansForClusterUnauthorized() *ControllersPublicV2ProxyGetVlansForClusterUnauthorized {
	return &ControllersPublicV2ProxyGetVlansForClusterUnauthorized{}
}

/*ControllersPublicV2ProxyGetVlansForClusterUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV2ProxyGetVlansForClusterUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV2ProxyGetVlansForClusterUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters/{cluster_id}/vlans][%d] controllersPublicV2ProxyGetVlansForClusterUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV2ProxyGetVlansForClusterUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV2ProxyGetVlansForClusterForbidden creates a ControllersPublicV2ProxyGetVlansForClusterForbidden with default headers values
func NewControllersPublicV2ProxyGetVlansForClusterForbidden() *ControllersPublicV2ProxyGetVlansForClusterForbidden {
	return &ControllersPublicV2ProxyGetVlansForClusterForbidden{}
}

/*ControllersPublicV2ProxyGetVlansForClusterForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV2ProxyGetVlansForClusterForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV2ProxyGetVlansForClusterForbidden) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters/{cluster_id}/vlans][%d] controllersPublicV2ProxyGetVlansForClusterForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV2ProxyGetVlansForClusterForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV2ProxyGetVlansForClusterNotFound creates a ControllersPublicV2ProxyGetVlansForClusterNotFound with default headers values
func NewControllersPublicV2ProxyGetVlansForClusterNotFound() *ControllersPublicV2ProxyGetVlansForClusterNotFound {
	return &ControllersPublicV2ProxyGetVlansForClusterNotFound{}
}

/*ControllersPublicV2ProxyGetVlansForClusterNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV2ProxyGetVlansForClusterNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV2ProxyGetVlansForClusterNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters/{cluster_id}/vlans][%d] controllersPublicV2ProxyGetVlansForClusterNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV2ProxyGetVlansForClusterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV2ProxyGetVlansForClusterInternalServerError creates a ControllersPublicV2ProxyGetVlansForClusterInternalServerError with default headers values
func NewControllersPublicV2ProxyGetVlansForClusterInternalServerError() *ControllersPublicV2ProxyGetVlansForClusterInternalServerError {
	return &ControllersPublicV2ProxyGetVlansForClusterInternalServerError{}
}

/*ControllersPublicV2ProxyGetVlansForClusterInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV2ProxyGetVlansForClusterInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV2ProxyGetVlansForClusterInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v2/vcenters/{instance_id}/clusters/{cluster_id}/vlans][%d] controllersPublicV2ProxyGetVlansForClusterInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV2ProxyGetVlansForClusterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
