// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// NewControllersPublicV1ProxyOrderEdgeVcsParams creates a new ControllersPublicV1ProxyOrderEdgeVcsParams object
// with the default values initialized.
func NewControllersPublicV1ProxyOrderEdgeVcsParams() *ControllersPublicV1ProxyOrderEdgeVcsParams {
	var (
		checkPriceDefault = bool(false)
		verifyOnlyDefault = bool(false)
	)
	return &ControllersPublicV1ProxyOrderEdgeVcsParams{
		CheckPrice: &checkPriceDefault,
		VerifyOnly: &verifyOnlyDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewControllersPublicV1ProxyOrderEdgeVcsParamsWithTimeout creates a new ControllersPublicV1ProxyOrderEdgeVcsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewControllersPublicV1ProxyOrderEdgeVcsParamsWithTimeout(timeout time.Duration) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	var (
		checkPriceDefault = bool(false)
		verifyOnlyDefault = bool(false)
	)
	return &ControllersPublicV1ProxyOrderEdgeVcsParams{
		CheckPrice: &checkPriceDefault,
		VerifyOnly: &verifyOnlyDefault,

		timeout: timeout,
	}
}

// NewControllersPublicV1ProxyOrderEdgeVcsParamsWithContext creates a new ControllersPublicV1ProxyOrderEdgeVcsParams object
// with the default values initialized, and the ability to set a context for a request
func NewControllersPublicV1ProxyOrderEdgeVcsParamsWithContext(ctx context.Context) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	var (
		checkPriceDefault = bool(false)
		verifyOnlyDefault = bool(false)
	)
	return &ControllersPublicV1ProxyOrderEdgeVcsParams{
		CheckPrice: &checkPriceDefault,
		VerifyOnly: &verifyOnlyDefault,

		Context: ctx,
	}
}

// NewControllersPublicV1ProxyOrderEdgeVcsParamsWithHTTPClient creates a new ControllersPublicV1ProxyOrderEdgeVcsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewControllersPublicV1ProxyOrderEdgeVcsParamsWithHTTPClient(client *http.Client) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	var (
		checkPriceDefault = bool(false)
		verifyOnlyDefault = bool(false)
	)
	return &ControllersPublicV1ProxyOrderEdgeVcsParams{
		CheckPrice: &checkPriceDefault,
		VerifyOnly: &verifyOnlyDefault,
		HTTPClient: client,
	}
}

/*ControllersPublicV1ProxyOrderEdgeVcsParams contains all the parameters to send to the API endpoint
for the controllers public v1 proxy order edge vcs operation typically these are written to a http.Request
*/
type ControllersPublicV1ProxyOrderEdgeVcsParams struct {

	/*Authorization
	  Your IBM Cloud Identity and Access Management (IAM) token. To retrieve your IAM token, run `ibmcloud iam oauth-tokens`.

	*/
	Authorization string
	/*CheckPrice
	  Whether to display the high-level price associated with the order.

	*/
	CheckPrice *bool
	/*VcsEdgeOrderData
	  Order specification with configurations.

	*/
	VcsEdgeOrderData *models.VcsEdgeOrderData
	/*VerifyOnly
	  Whether to verify the order only instead of performing the order for real.

	*/
	VerifyOnly *bool
	/*XGlobalTransactionID
	  Global transaction ID for request correlation.

	*/
	XGlobalTransactionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) WithTimeout(timeout time.Duration) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) WithContext(ctx context.Context) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) WithHTTPClient(client *http.Client) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) WithAuthorization(authorization string) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithCheckPrice adds the checkPrice to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) WithCheckPrice(checkPrice *bool) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	o.SetCheckPrice(checkPrice)
	return o
}

// SetCheckPrice adds the checkPrice to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) SetCheckPrice(checkPrice *bool) {
	o.CheckPrice = checkPrice
}

// WithVcsEdgeOrderData adds the vcsEdgeOrderData to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) WithVcsEdgeOrderData(vcsEdgeOrderData *models.VcsEdgeOrderData) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	o.SetVcsEdgeOrderData(vcsEdgeOrderData)
	return o
}

// SetVcsEdgeOrderData adds the vcsEdgeOrderData to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) SetVcsEdgeOrderData(vcsEdgeOrderData *models.VcsEdgeOrderData) {
	o.VcsEdgeOrderData = vcsEdgeOrderData
}

// WithVerifyOnly adds the verifyOnly to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) WithVerifyOnly(verifyOnly *bool) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	o.SetVerifyOnly(verifyOnly)
	return o
}

// SetVerifyOnly adds the verifyOnly to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) SetVerifyOnly(verifyOnly *bool) {
	o.VerifyOnly = verifyOnly
}

// WithXGlobalTransactionID adds the xGlobalTransactionID to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) WithXGlobalTransactionID(xGlobalTransactionID *string) *ControllersPublicV1ProxyOrderEdgeVcsParams {
	o.SetXGlobalTransactionID(xGlobalTransactionID)
	return o
}

// SetXGlobalTransactionID adds the xGlobalTransactionId to the controllers public v1 proxy order edge vcs params
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) SetXGlobalTransactionID(xGlobalTransactionID *string) {
	o.XGlobalTransactionID = xGlobalTransactionID
}

// WriteToRequest writes these params to a swagger request
func (o *ControllersPublicV1ProxyOrderEdgeVcsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.CheckPrice != nil {

		// query param check_price
		var qrCheckPrice bool
		if o.CheckPrice != nil {
			qrCheckPrice = *o.CheckPrice
		}
		qCheckPrice := swag.FormatBool(qrCheckPrice)
		if qCheckPrice != "" {
			if err := r.SetQueryParam("check_price", qCheckPrice); err != nil {
				return err
			}
		}

	}

	if o.VcsEdgeOrderData != nil {
		if err := r.SetBodyParam(o.VcsEdgeOrderData); err != nil {
			return err
		}
	}

	if o.VerifyOnly != nil {

		// query param verify_only
		var qrVerifyOnly bool
		if o.VerifyOnly != nil {
			qrVerifyOnly = *o.VerifyOnly
		}
		qVerifyOnly := swag.FormatBool(qrVerifyOnly)
		if qVerifyOnly != "" {
			if err := r.SetQueryParam("verify_only", qVerifyOnly); err != nil {
				return err
			}
		}

	}

	if o.XGlobalTransactionID != nil {

		// header param x-global-transaction-id
		if err := r.SetHeaderParam("x-global-transaction-id", *o.XGlobalTransactionID); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
