// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewControllersPublicV2ProxyGetVcenterHistoryMessagesParams creates a new ControllersPublicV2ProxyGetVcenterHistoryMessagesParams object
// with the default values initialized.
func NewControllersPublicV2ProxyGetVcenterHistoryMessagesParams() *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	var ()
	return &ControllersPublicV2ProxyGetVcenterHistoryMessagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewControllersPublicV2ProxyGetVcenterHistoryMessagesParamsWithTimeout creates a new ControllersPublicV2ProxyGetVcenterHistoryMessagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewControllersPublicV2ProxyGetVcenterHistoryMessagesParamsWithTimeout(timeout time.Duration) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	var ()
	return &ControllersPublicV2ProxyGetVcenterHistoryMessagesParams{

		timeout: timeout,
	}
}

// NewControllersPublicV2ProxyGetVcenterHistoryMessagesParamsWithContext creates a new ControllersPublicV2ProxyGetVcenterHistoryMessagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewControllersPublicV2ProxyGetVcenterHistoryMessagesParamsWithContext(ctx context.Context) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	var ()
	return &ControllersPublicV2ProxyGetVcenterHistoryMessagesParams{

		Context: ctx,
	}
}

// NewControllersPublicV2ProxyGetVcenterHistoryMessagesParamsWithHTTPClient creates a new ControllersPublicV2ProxyGetVcenterHistoryMessagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewControllersPublicV2ProxyGetVcenterHistoryMessagesParamsWithHTTPClient(client *http.Client) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	var ()
	return &ControllersPublicV2ProxyGetVcenterHistoryMessagesParams{
		HTTPClient: client,
	}
}

/*ControllersPublicV2ProxyGetVcenterHistoryMessagesParams contains all the parameters to send to the API endpoint
for the controllers public v2 proxy get vcenter history messages operation typically these are written to a http.Request
*/
type ControllersPublicV2ProxyGetVcenterHistoryMessagesParams struct {

	/*Authorization
	  Your IBM Cloud Identity and Access Management (IAM) token. To retrieve your IAM token, run `ibmcloud iam oauth-tokens`.

	*/
	Authorization string
	/*EndDate
	  The end date to when history messages are retrieved. If it is not specified, the current date is used. The format is YYYY-MM-DD.

	*/
	EndDate *strfmt.Date
	/*InstanceID
	  Instance ID.

	*/
	InstanceID string
	/*StartDate
	  The start date from when history messages are retrieved. If it is not specified, the date when the instance was deployed is used. The format is YYYY-MM-DD.

	*/
	StartDate *strfmt.Date
	/*XGlobalTransactionID
	  Global transaction ID for request correlation.

	*/
	XGlobalTransactionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) WithTimeout(timeout time.Duration) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) WithContext(ctx context.Context) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) WithHTTPClient(client *http.Client) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) WithAuthorization(authorization string) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithEndDate adds the endDate to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) WithEndDate(endDate *strfmt.Date) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) SetEndDate(endDate *strfmt.Date) {
	o.EndDate = endDate
}

// WithInstanceID adds the instanceID to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) WithInstanceID(instanceID string) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	o.SetInstanceID(instanceID)
	return o
}

// SetInstanceID adds the instanceId to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) SetInstanceID(instanceID string) {
	o.InstanceID = instanceID
}

// WithStartDate adds the startDate to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) WithStartDate(startDate *strfmt.Date) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) SetStartDate(startDate *strfmt.Date) {
	o.StartDate = startDate
}

// WithXGlobalTransactionID adds the xGlobalTransactionID to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) WithXGlobalTransactionID(xGlobalTransactionID *string) *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams {
	o.SetXGlobalTransactionID(xGlobalTransactionID)
	return o
}

// SetXGlobalTransactionID adds the xGlobalTransactionId to the controllers public v2 proxy get vcenter history messages params
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) SetXGlobalTransactionID(xGlobalTransactionID *string) {
	o.XGlobalTransactionID = xGlobalTransactionID
}

// WriteToRequest writes these params to a swagger request
func (o *ControllersPublicV2ProxyGetVcenterHistoryMessagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate strfmt.Date
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {
			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}

	}

	// path param instance_id
	if err := r.SetPathParam("instance_id", o.InstanceID); err != nil {
		return err
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate strfmt.Date
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {
			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}

	}

	if o.XGlobalTransactionID != nil {

		// header param x-global-transaction-id
		if err := r.SetHeaderParam("x-global-transaction-id", *o.XGlobalTransactionID); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
