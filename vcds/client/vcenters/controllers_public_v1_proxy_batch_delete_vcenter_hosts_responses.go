// Code generated by go-swagger; DO NOT EDIT.

package vcenters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyBatchDeleteVcenterHostsReader is a Reader for the ControllersPublicV1ProxyBatchDeleteVcenterHosts structure.
type ControllersPublicV1ProxyBatchDeleteVcenterHostsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterHostsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted creates a ControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted() *ControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted {
	return &ControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted handles this case with default header values.

Success. The request for deleting the specified hosts has been accepted.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted struct {
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyBatchDeleteVcenterHostsAccepted ", 202)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest creates a ControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest() *ControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest {
	return &ControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest handles this case with default header values.

Bad request. Check your request parameters.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest  %+v", 400, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized creates a ControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized() *ControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized {
	return &ControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden creates a ControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden() *ControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden {
	return &ControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyBatchDeleteVcenterHostsForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound creates a ControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound() *ControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound {
	return &ControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyBatchDeleteVcenterHostsNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterHostsConflict creates a ControllersPublicV1ProxyBatchDeleteVcenterHostsConflict with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterHostsConflict() *ControllersPublicV1ProxyBatchDeleteVcenterHostsConflict {
	return &ControllersPublicV1ProxyBatchDeleteVcenterHostsConflict{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterHostsConflict handles this case with default header values.

Conflict. The request cannot be completed because of a conflict with the current state of the target resource.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterHostsConflict struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsConflict) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyBatchDeleteVcenterHostsConflict  %+v", 409, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError creates a ControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError with default headers values
func NewControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError() *ControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError {
	return &ControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError{}
}

/*ControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcenters/{instance_id}/clusters/{cluster_id}/hosts][%d] controllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ControllersPublicV1ProxyBatchDeleteVcenterHostsBody controllers public v1 proxy batch delete vcenter hosts body
swagger:model ControllersPublicV1ProxyBatchDeleteVcenterHostsBody
*/
type ControllersPublicV1ProxyBatchDeleteVcenterHostsBody struct {

	// Action to be performed against the specified hosts. 'delete' is the only supported value.
	// Required: true
	// Enum: [delete]
	Action *string `json:"action"`

	// List of host IDs to be deleted. Delete these specified hosts from a specified cluster.
	// Required: true
	Hosts []string `json:"hosts"`
}

// Validate validates this controllers public v1 proxy batch delete vcenter hosts body
func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var controllersPublicV1ProxyBatchDeleteVcenterHostsBodyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		controllersPublicV1ProxyBatchDeleteVcenterHostsBodyTypeActionPropEnum = append(controllersPublicV1ProxyBatchDeleteVcenterHostsBodyTypeActionPropEnum, v)
	}
}

const (

	// ControllersPublicV1ProxyBatchDeleteVcenterHostsBodyActionDelete captures enum value "delete"
	ControllersPublicV1ProxyBatchDeleteVcenterHostsBodyActionDelete string = "delete"
)

// prop value enum
func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsBody) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, controllersPublicV1ProxyBatchDeleteVcenterHostsBodyTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsBody) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("hosts_delete_data"+"."+"action", "body", o.Action); err != nil {
		return err
	}

	// value enum
	if err := o.validateActionEnum("hosts_delete_data"+"."+"action", "body", *o.Action); err != nil {
		return err
	}

	return nil
}

func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsBody) validateHosts(formats strfmt.Registry) error {

	if err := validate.Required("hosts_delete_data"+"."+"hosts", "body", o.Hosts); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ControllersPublicV1ProxyBatchDeleteVcenterHostsBody) UnmarshalBinary(b []byte) error {
	var res ControllersPublicV1ProxyBatchDeleteVcenterHostsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
