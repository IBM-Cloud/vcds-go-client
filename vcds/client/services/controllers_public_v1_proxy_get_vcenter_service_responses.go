// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyGetVcenterServiceReader is a Reader for the ControllersPublicV1ProxyGetVcenterService structure.
type ControllersPublicV1ProxyGetVcenterServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyGetVcenterServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyGetVcenterServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewControllersPublicV1ProxyGetVcenterServiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyGetVcenterServiceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyGetVcenterServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyGetVcenterServiceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyGetVcenterServiceOK creates a ControllersPublicV1ProxyGetVcenterServiceOK with default headers values
func NewControllersPublicV1ProxyGetVcenterServiceOK() *ControllersPublicV1ProxyGetVcenterServiceOK {
	return &ControllersPublicV1ProxyGetVcenterServiceOK{}
}

/*ControllersPublicV1ProxyGetVcenterServiceOK handles this case with default header values.

Success.
*/
type ControllersPublicV1ProxyGetVcenterServiceOK struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.ServiceInstance
}

func (o *ControllersPublicV1ProxyGetVcenterServiceOK) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances/{service_instance_id}][%d] controllersPublicV1ProxyGetVcenterServiceOK  %+v", 200, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.ServiceInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetVcenterServiceUnauthorized creates a ControllersPublicV1ProxyGetVcenterServiceUnauthorized with default headers values
func NewControllersPublicV1ProxyGetVcenterServiceUnauthorized() *ControllersPublicV1ProxyGetVcenterServiceUnauthorized {
	return &ControllersPublicV1ProxyGetVcenterServiceUnauthorized{}
}

/*ControllersPublicV1ProxyGetVcenterServiceUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyGetVcenterServiceUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetVcenterServiceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances/{service_instance_id}][%d] controllersPublicV1ProxyGetVcenterServiceUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterServiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetVcenterServiceForbidden creates a ControllersPublicV1ProxyGetVcenterServiceForbidden with default headers values
func NewControllersPublicV1ProxyGetVcenterServiceForbidden() *ControllersPublicV1ProxyGetVcenterServiceForbidden {
	return &ControllersPublicV1ProxyGetVcenterServiceForbidden{}
}

/*ControllersPublicV1ProxyGetVcenterServiceForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyGetVcenterServiceForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetVcenterServiceForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances/{service_instance_id}][%d] controllersPublicV1ProxyGetVcenterServiceForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterServiceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetVcenterServiceNotFound creates a ControllersPublicV1ProxyGetVcenterServiceNotFound with default headers values
func NewControllersPublicV1ProxyGetVcenterServiceNotFound() *ControllersPublicV1ProxyGetVcenterServiceNotFound {
	return &ControllersPublicV1ProxyGetVcenterServiceNotFound{}
}

/*ControllersPublicV1ProxyGetVcenterServiceNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyGetVcenterServiceNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetVcenterServiceNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances/{service_instance_id}][%d] controllersPublicV1ProxyGetVcenterServiceNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyGetVcenterServiceInternalServerError creates a ControllersPublicV1ProxyGetVcenterServiceInternalServerError with default headers values
func NewControllersPublicV1ProxyGetVcenterServiceInternalServerError() *ControllersPublicV1ProxyGetVcenterServiceInternalServerError {
	return &ControllersPublicV1ProxyGetVcenterServiceInternalServerError{}
}

/*ControllersPublicV1ProxyGetVcenterServiceInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyGetVcenterServiceInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyGetVcenterServiceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances/{service_instance_id}][%d] controllersPublicV1ProxyGetVcenterServiceInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyGetVcenterServiceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
