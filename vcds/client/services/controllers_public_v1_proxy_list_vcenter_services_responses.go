// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyListVcenterServicesReader is a Reader for the ControllersPublicV1ProxyListVcenterServices structure.
type ControllersPublicV1ProxyListVcenterServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyListVcenterServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyListVcenterServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewControllersPublicV1ProxyListVcenterServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyListVcenterServicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyListVcenterServicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyListVcenterServicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyListVcenterServicesOK creates a ControllersPublicV1ProxyListVcenterServicesOK with default headers values
func NewControllersPublicV1ProxyListVcenterServicesOK() *ControllersPublicV1ProxyListVcenterServicesOK {
	return &ControllersPublicV1ProxyListVcenterServicesOK{}
}

/*ControllersPublicV1ProxyListVcenterServicesOK handles this case with default header values.

Success.
*/
type ControllersPublicV1ProxyListVcenterServicesOK struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.ServiceInstances
}

func (o *ControllersPublicV1ProxyListVcenterServicesOK) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances][%d] controllersPublicV1ProxyListVcenterServicesOK  %+v", 200, o.Payload)
}

func (o *ControllersPublicV1ProxyListVcenterServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.ServiceInstances)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyListVcenterServicesUnauthorized creates a ControllersPublicV1ProxyListVcenterServicesUnauthorized with default headers values
func NewControllersPublicV1ProxyListVcenterServicesUnauthorized() *ControllersPublicV1ProxyListVcenterServicesUnauthorized {
	return &ControllersPublicV1ProxyListVcenterServicesUnauthorized{}
}

/*ControllersPublicV1ProxyListVcenterServicesUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyListVcenterServicesUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyListVcenterServicesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances][%d] controllersPublicV1ProxyListVcenterServicesUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyListVcenterServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyListVcenterServicesForbidden creates a ControllersPublicV1ProxyListVcenterServicesForbidden with default headers values
func NewControllersPublicV1ProxyListVcenterServicesForbidden() *ControllersPublicV1ProxyListVcenterServicesForbidden {
	return &ControllersPublicV1ProxyListVcenterServicesForbidden{}
}

/*ControllersPublicV1ProxyListVcenterServicesForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyListVcenterServicesForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyListVcenterServicesForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances][%d] controllersPublicV1ProxyListVcenterServicesForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyListVcenterServicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyListVcenterServicesNotFound creates a ControllersPublicV1ProxyListVcenterServicesNotFound with default headers values
func NewControllersPublicV1ProxyListVcenterServicesNotFound() *ControllersPublicV1ProxyListVcenterServicesNotFound {
	return &ControllersPublicV1ProxyListVcenterServicesNotFound{}
}

/*ControllersPublicV1ProxyListVcenterServicesNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyListVcenterServicesNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyListVcenterServicesNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances][%d] controllersPublicV1ProxyListVcenterServicesNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyListVcenterServicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyListVcenterServicesInternalServerError creates a ControllersPublicV1ProxyListVcenterServicesInternalServerError with default headers values
func NewControllersPublicV1ProxyListVcenterServicesInternalServerError() *ControllersPublicV1ProxyListVcenterServicesInternalServerError {
	return &ControllersPublicV1ProxyListVcenterServicesInternalServerError{}
}

/*ControllersPublicV1ProxyListVcenterServicesInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyListVcenterServicesInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyListVcenterServicesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/vcenters/{instance_id}/service_instances][%d] controllersPublicV1ProxyListVcenterServicesInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyListVcenterServicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
