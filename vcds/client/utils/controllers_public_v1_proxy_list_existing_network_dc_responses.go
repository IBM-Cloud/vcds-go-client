// Code generated by go-swagger; DO NOT EDIT.

package utils

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// ControllersPublicV1ProxyListExistingNetworkDcReader is a Reader for the ControllersPublicV1ProxyListExistingNetworkDc structure.
type ControllersPublicV1ProxyListExistingNetworkDcReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllersPublicV1ProxyListExistingNetworkDcReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllersPublicV1ProxyListExistingNetworkDcOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewControllersPublicV1ProxyListExistingNetworkDcUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllersPublicV1ProxyListExistingNetworkDcForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllersPublicV1ProxyListExistingNetworkDcNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewControllersPublicV1ProxyListExistingNetworkDcInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllersPublicV1ProxyListExistingNetworkDcOK creates a ControllersPublicV1ProxyListExistingNetworkDcOK with default headers values
func NewControllersPublicV1ProxyListExistingNetworkDcOK() *ControllersPublicV1ProxyListExistingNetworkDcOK {
	return &ControllersPublicV1ProxyListExistingNetworkDcOK{}
}

/*ControllersPublicV1ProxyListExistingNetworkDcOK handles this case with default header values.

Success.
*/
type ControllersPublicV1ProxyListExistingNetworkDcOK struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload models.ArrayExistingVlans
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcOK) Error() string {
	return fmt.Sprintf("[GET /v1/existing_network][%d] controllersPublicV1ProxyListExistingNetworkDcOK  %+v", 200, o.Payload)
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyListExistingNetworkDcUnauthorized creates a ControllersPublicV1ProxyListExistingNetworkDcUnauthorized with default headers values
func NewControllersPublicV1ProxyListExistingNetworkDcUnauthorized() *ControllersPublicV1ProxyListExistingNetworkDcUnauthorized {
	return &ControllersPublicV1ProxyListExistingNetworkDcUnauthorized{}
}

/*ControllersPublicV1ProxyListExistingNetworkDcUnauthorized handles this case with default header values.

Unauthorized. The IAM token is invalid or expired. To retrieve your IAM token, run `ibmcloud login` and then `ibmcloud iam oauth-tokens`.
*/
type ControllersPublicV1ProxyListExistingNetworkDcUnauthorized struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/existing_network][%d] controllersPublicV1ProxyListExistingNetworkDcUnauthorized  %+v", 401, o.Payload)
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyListExistingNetworkDcForbidden creates a ControllersPublicV1ProxyListExistingNetworkDcForbidden with default headers values
func NewControllersPublicV1ProxyListExistingNetworkDcForbidden() *ControllersPublicV1ProxyListExistingNetworkDcForbidden {
	return &ControllersPublicV1ProxyListExistingNetworkDcForbidden{}
}

/*ControllersPublicV1ProxyListExistingNetworkDcForbidden handles this case with default header values.

Forbidden. Access to the specified resource is not authorized. Check the IAM access policy for the `VMware Solutions` service.
*/
type ControllersPublicV1ProxyListExistingNetworkDcForbidden struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/existing_network][%d] controllersPublicV1ProxyListExistingNetworkDcForbidden  %+v", 403, o.Payload)
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyListExistingNetworkDcNotFound creates a ControllersPublicV1ProxyListExistingNetworkDcNotFound with default headers values
func NewControllersPublicV1ProxyListExistingNetworkDcNotFound() *ControllersPublicV1ProxyListExistingNetworkDcNotFound {
	return &ControllersPublicV1ProxyListExistingNetworkDcNotFound{}
}

/*ControllersPublicV1ProxyListExistingNetworkDcNotFound handles this case with default header values.

Not found. The resource cannot be found.
*/
type ControllersPublicV1ProxyListExistingNetworkDcNotFound struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/existing_network][%d] controllersPublicV1ProxyListExistingNetworkDcNotFound  %+v", 404, o.Payload)
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllersPublicV1ProxyListExistingNetworkDcInternalServerError creates a ControllersPublicV1ProxyListExistingNetworkDcInternalServerError with default headers values
func NewControllersPublicV1ProxyListExistingNetworkDcInternalServerError() *ControllersPublicV1ProxyListExistingNetworkDcInternalServerError {
	return &ControllersPublicV1ProxyListExistingNetworkDcInternalServerError{}
}

/*ControllersPublicV1ProxyListExistingNetworkDcInternalServerError handles this case with default header values.

Internal server error. Your request cannot be processed. Please wait a few minutes and try again.
*/
type ControllersPublicV1ProxyListExistingNetworkDcInternalServerError struct {
	/*Global transaction ID for request correlation.
	 */
	XGlobalTransactionID string

	Payload *models.Error
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/existing_network][%d] controllersPublicV1ProxyListExistingNetworkDcInternalServerError  %+v", 500, o.Payload)
}

func (o *ControllersPublicV1ProxyListExistingNetworkDcInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header x-global-transaction-id
	o.XGlobalTransactionID = response.GetHeader("x-global-transaction-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
