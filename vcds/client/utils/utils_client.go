// Code generated by go-swagger; DO NOT EDIT.

package utils

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new utils API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for utils API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ControllersPublicV1ProxyListExistingNetworkDc retrieves the existing network in a data center

Retrieve the existing network from a specified data center.
*/
func (a *Client) ControllersPublicV1ProxyListExistingNetworkDc(params *ControllersPublicV1ProxyListExistingNetworkDcParams) (*ControllersPublicV1ProxyListExistingNetworkDcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV1ProxyListExistingNetworkDcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v1.proxy.list_existing_network_dc",
		Method:             "GET",
		PathPattern:        "/v1/existing_network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV1ProxyListExistingNetworkDcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV1ProxyListExistingNetworkDcOK), nil

}

/*
ControllersPublicV2ProxyListDiskTypes gets the list of supported disk types as a JSON object

Get the list of supported disk types as a JSON object, and the key name is "disk_types".
*/
func (a *Client) ControllersPublicV2ProxyListDiskTypes(params *ControllersPublicV2ProxyListDiskTypesParams) (*ControllersPublicV2ProxyListDiskTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListDiskTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_disk_types",
		Method:             "GET",
		PathPattern:        "/v2/disk_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListDiskTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListDiskTypesOK), nil

}

/*
ControllersPublicV2ProxyListLocations gets the list of supported data center locations as a JSON object

Get the list of supported data center locations as a JSON object, and the key name is "locations".
*/
func (a *Client) ControllersPublicV2ProxyListLocations(params *ControllersPublicV2ProxyListLocationsParams) (*ControllersPublicV2ProxyListLocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListLocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_locations",
		Method:             "GET",
		PathPattern:        "/v2/locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListLocationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListLocationsOK), nil

}

/*
ControllersPublicV2ProxyListMzrLocations gets the list of supported data center locations as a JSON object

Get the list of supported data center locations as a JSON object, and the key name is "mzr_locations".
*/
func (a *Client) ControllersPublicV2ProxyListMzrLocations(params *ControllersPublicV2ProxyListMzrLocationsParams) (*ControllersPublicV2ProxyListMzrLocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListMzrLocationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_mzr_locations",
		Method:             "GET",
		PathPattern:        "/v2/mzr_locations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListMzrLocationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListMzrLocationsOK), nil

}

/*
ControllersPublicV2ProxyListRAMTypes gets the list of supported RAM types as a JSON object

Get the list of supported RAM types as a JSON object, and the key name is "ram_types".
*/
func (a *Client) ControllersPublicV2ProxyListRAMTypes(params *ControllersPublicV2ProxyListRAMTypesParams) (*ControllersPublicV2ProxyListRAMTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListRAMTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_ram_types",
		Method:             "GET",
		PathPattern:        "/v2/ram_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListRAMTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListRAMTypesOK), nil

}

/*
ControllersPublicV2ProxyListServerTypes gets the list of supported server CPU types per location as a JSON object

Get the list of supported server types per location as a JSON object, and the key name is the given location value. If no location is given, the key name is "server_types"
*/
func (a *Client) ControllersPublicV2ProxyListServerTypes(params *ControllersPublicV2ProxyListServerTypesParams) (*ControllersPublicV2ProxyListServerTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListServerTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_server_types",
		Method:             "GET",
		PathPattern:        "/v2/server_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListServerTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListServerTypesOK), nil

}

/*
ControllersPublicV2ProxyListSharedStorageTiers gets the list of supported shared storage tiers as a JSON object

Get the list of supported shared storage tiers as a JSON object, and the key name is "shared_storage_tiers".
*/
func (a *Client) ControllersPublicV2ProxyListSharedStorageTiers(params *ControllersPublicV2ProxyListSharedStorageTiersParams) (*ControllersPublicV2ProxyListSharedStorageTiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListSharedStorageTiersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_shared_storage_tiers",
		Method:             "GET",
		PathPattern:        "/v2/shared_storage_tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListSharedStorageTiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListSharedStorageTiersOK), nil

}

/*
ControllersPublicV2ProxyListTemplates gets the list of available hardware templates as a JSON object

Get the list of available hardware templates as a JSON object, and the key name is "templates".
*/
func (a *Client) ControllersPublicV2ProxyListTemplates(params *ControllersPublicV2ProxyListTemplatesParams) (*ControllersPublicV2ProxyListTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_templates",
		Method:             "GET",
		PathPattern:        "/v2/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListTemplatesOK), nil

}

/*
ControllersPublicV2ProxyListVsphereVersions gets the list of supported v sphere versions as a JSON object

Get the list of supported vSphere versions as a JSON object, and the key name is "vsphere_versions".
*/
func (a *Client) ControllersPublicV2ProxyListVsphereVersions(params *ControllersPublicV2ProxyListVsphereVersionsParams) (*ControllersPublicV2ProxyListVsphereVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllersPublicV2ProxyListVsphereVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllers.public.v2.proxy.list_vsphere_versions",
		Method:             "GET",
		PathPattern:        "/v2/vsphere_versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ControllersPublicV2ProxyListVsphereVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllersPublicV2ProxyListVsphereVersionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
