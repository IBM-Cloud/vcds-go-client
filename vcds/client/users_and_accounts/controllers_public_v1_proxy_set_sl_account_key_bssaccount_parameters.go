// Code generated by go-swagger; DO NOT EDIT.

package users_and_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/vcds-go-client/vcds/models"
)

// NewControllersPublicV1ProxySetSlAccountKeyBssaccountParams creates a new ControllersPublicV1ProxySetSlAccountKeyBssaccountParams object
// with the default values initialized.
func NewControllersPublicV1ProxySetSlAccountKeyBssaccountParams() *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	var (
		retrieveOnlyDefault = bool(false)
	)
	return &ControllersPublicV1ProxySetSlAccountKeyBssaccountParams{
		RetrieveOnly: &retrieveOnlyDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewControllersPublicV1ProxySetSlAccountKeyBssaccountParamsWithTimeout creates a new ControllersPublicV1ProxySetSlAccountKeyBssaccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewControllersPublicV1ProxySetSlAccountKeyBssaccountParamsWithTimeout(timeout time.Duration) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	var (
		retrieveOnlyDefault = bool(false)
	)
	return &ControllersPublicV1ProxySetSlAccountKeyBssaccountParams{
		RetrieveOnly: &retrieveOnlyDefault,

		timeout: timeout,
	}
}

// NewControllersPublicV1ProxySetSlAccountKeyBssaccountParamsWithContext creates a new ControllersPublicV1ProxySetSlAccountKeyBssaccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewControllersPublicV1ProxySetSlAccountKeyBssaccountParamsWithContext(ctx context.Context) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	var (
		retrieveOnlyDefault = bool(false)
	)
	return &ControllersPublicV1ProxySetSlAccountKeyBssaccountParams{
		RetrieveOnly: &retrieveOnlyDefault,

		Context: ctx,
	}
}

// NewControllersPublicV1ProxySetSlAccountKeyBssaccountParamsWithHTTPClient creates a new ControllersPublicV1ProxySetSlAccountKeyBssaccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewControllersPublicV1ProxySetSlAccountKeyBssaccountParamsWithHTTPClient(client *http.Client) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	var (
		retrieveOnlyDefault = bool(false)
	)
	return &ControllersPublicV1ProxySetSlAccountKeyBssaccountParams{
		RetrieveOnly: &retrieveOnlyDefault,
		HTTPClient:   client,
	}
}

/*ControllersPublicV1ProxySetSlAccountKeyBssaccountParams contains all the parameters to send to the API endpoint
for the controllers public v1 proxy set sl account key bssaccount operation typically these are written to a http.Request
*/
type ControllersPublicV1ProxySetSlAccountKeyBssaccountParams struct {

	/*Authorization
	  Your IBM Cloud Identity and Access Management (IAM) token. To retrieve your IAM token, run `ibmcloud iam oauth-tokens`.

	*/
	Authorization string
	/*InfraAccount
	  The IBM Cloud infrastructure account information. The provided IBM Cloud infrastructure account ID should be consistent with the provided user name and API key.

	*/
	InfraAccount *models.InfraCredentials
	/*RetrieveOnly
	  Whether to only retrieve the IBM Cloud infrastructure API user information.

	*/
	RetrieveOnly *bool
	/*XGlobalTransactionID
	  Global transaction ID for request correlation.

	*/
	XGlobalTransactionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) WithTimeout(timeout time.Duration) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) WithContext(ctx context.Context) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) WithHTTPClient(client *http.Client) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) WithAuthorization(authorization string) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithInfraAccount adds the infraAccount to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) WithInfraAccount(infraAccount *models.InfraCredentials) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	o.SetInfraAccount(infraAccount)
	return o
}

// SetInfraAccount adds the infraAccount to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) SetInfraAccount(infraAccount *models.InfraCredentials) {
	o.InfraAccount = infraAccount
}

// WithRetrieveOnly adds the retrieveOnly to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) WithRetrieveOnly(retrieveOnly *bool) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	o.SetRetrieveOnly(retrieveOnly)
	return o
}

// SetRetrieveOnly adds the retrieveOnly to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) SetRetrieveOnly(retrieveOnly *bool) {
	o.RetrieveOnly = retrieveOnly
}

// WithXGlobalTransactionID adds the xGlobalTransactionID to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) WithXGlobalTransactionID(xGlobalTransactionID *string) *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams {
	o.SetXGlobalTransactionID(xGlobalTransactionID)
	return o
}

// SetXGlobalTransactionID adds the xGlobalTransactionId to the controllers public v1 proxy set sl account key bssaccount params
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) SetXGlobalTransactionID(xGlobalTransactionID *string) {
	o.XGlobalTransactionID = xGlobalTransactionID
}

// WriteToRequest writes these params to a swagger request
func (o *ControllersPublicV1ProxySetSlAccountKeyBssaccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.InfraAccount != nil {
		if err := r.SetBodyParam(o.InfraAccount); err != nil {
			return err
		}
	}

	if o.RetrieveOnly != nil {

		// query param retrieve_only
		var qrRetrieveOnly bool
		if o.RetrieveOnly != nil {
			qrRetrieveOnly = *o.RetrieveOnly
		}
		qRetrieveOnly := swag.FormatBool(qrRetrieveOnly)
		if qRetrieveOnly != "" {
			if err := r.SetQueryParam("retrieve_only", qRetrieveOnly); err != nil {
				return err
			}
		}

	}

	if o.XGlobalTransactionID != nil {

		// header param x-global-transaction-id
		if err := r.SetHeaderParam("x-global-transaction-id", *o.XGlobalTransactionID); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
