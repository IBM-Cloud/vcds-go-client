// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiskGroup disk group
// swagger:model disk_group
type DiskGroup struct {

	// An array of disk types for each of the local disks used in disk groups.
	// Required: true
	Disks []string `json:"disks"`

	// RAID type for disk groups. Currently only RAID_10 is supported.
	// Enum: [RAID_10]
	RaidType *string `json:"raid_type,omitempty"`
}

// Validate validates this disk group
func (m *DiskGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaidType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskGroup) validateDisks(formats strfmt.Registry) error {

	if err := validate.Required("disks", "body", m.Disks); err != nil {
		return err
	}

	return nil
}

var diskGroupTypeRaidTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RAID_10"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskGroupTypeRaidTypePropEnum = append(diskGroupTypeRaidTypePropEnum, v)
	}
}

const (

	// DiskGroupRaidTypeRAID10 captures enum value "RAID_10"
	DiskGroupRaidTypeRAID10 string = "RAID_10"
)

// prop value enum
func (m *DiskGroup) validateRaidTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, diskGroupTypeRaidTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiskGroup) validateRaidType(formats strfmt.Registry) error {

	if swag.IsZero(m.RaidType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRaidTypeEnum("raid_type", "body", *m.RaidType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiskGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskGroup) UnmarshalBinary(b []byte) error {
	var res DiskGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
