// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ExistingVlan List the existing VLAN for a data center
// swagger:model existing_vlan
type ExistingVlan struct {

	// Internal identifier (ID) of the VLAN. For example, `1234567`.
	ID int64 `json:"id,omitempty"`

	// Pod name.
	Podname string `json:"podname,omitempty"`

	// List of primary subnets in the specified existing VLAN.
	PortableSubnets []*ExistingSubnet `json:"portable_subnets"`

	// List of primary subnets in the specified existing VLAN.
	PrimarySubnets []*ExistingSubnet `json:"primary_subnets"`

	// VLAN private or public type.
	VlanType string `json:"vlan_type,omitempty"`
}

// Validate validates this existing vlan
func (m *ExistingVlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePortableSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimarySubnets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExistingVlan) validatePortableSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.PortableSubnets) { // not required
		return nil
	}

	for i := 0; i < len(m.PortableSubnets); i++ {
		if swag.IsZero(m.PortableSubnets[i]) { // not required
			continue
		}

		if m.PortableSubnets[i] != nil {
			if err := m.PortableSubnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portable_subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExistingVlan) validatePrimarySubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimarySubnets) { // not required
		return nil
	}

	for i := 0; i < len(m.PrimarySubnets); i++ {
		if swag.IsZero(m.PrimarySubnets[i]) { // not required
			continue
		}

		if m.PrimarySubnets[i] != nil {
			if err := m.PrimarySubnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("primary_subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExistingVlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExistingVlan) UnmarshalBinary(b []byte) error {
	var res ExistingVlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
