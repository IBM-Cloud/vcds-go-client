// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MultiCluster Customized hardware configuration to be ordered.
// swagger:model multi_cluster
type MultiCluster struct {

	// New cluster name that must be unique for the specified instance.
	// Required: true
	// Max Length: 30
	ClusterName *string `json:"cluster_name"`

	// customized hardware
	// Required: true
	CustomizedHardware *CustomizedHardware `json:"customized_hardware"`

	// Whether the default pod is used
	IsDefaultPod *bool `json:"is_default_pod,omitempty"`

	// license keys
	LicenseKeys *MultiClusterLicenseKeys `json:"license_keys,omitempty"`

	// Data center location.
	// Required: true
	Location *string `json:"location"`

	// networking
	Networking *DefExistingNetworking `json:"networking,omitempty"`

	// Whether to attach to private network only.
	PrivateOnly *bool `json:"private_only,omitempty"`

	// Number of hardware servers.
	// Required: true
	Quantity *int64 `json:"quantity"`

	// List of shared storage configurations.
	SharedStorages []*SharedStorageConfig `json:"shared_storages"`

	// The template ID that maps to a preconfigured hardware specification to be ordered. To see supported templates, use the `GET /v2/templates` API.
	TemplateID string `json:"template_id,omitempty"`
}

// Validate validates this multi cluster
func (m *MultiCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomizedHardware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedStorages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultiCluster) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	if err := validate.MaxLength("cluster_name", "body", string(*m.ClusterName), 30); err != nil {
		return err
	}

	return nil
}

func (m *MultiCluster) validateCustomizedHardware(formats strfmt.Registry) error {

	if err := validate.Required("customized_hardware", "body", m.CustomizedHardware); err != nil {
		return err
	}

	if m.CustomizedHardware != nil {
		if err := m.CustomizedHardware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customized_hardware")
			}
			return err
		}
	}

	return nil
}

func (m *MultiCluster) validateLicenseKeys(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseKeys) { // not required
		return nil
	}

	if m.LicenseKeys != nil {
		if err := m.LicenseKeys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys")
			}
			return err
		}
	}

	return nil
}

func (m *MultiCluster) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *MultiCluster) validateNetworking(formats strfmt.Registry) error {

	if swag.IsZero(m.Networking) { // not required
		return nil
	}

	if m.Networking != nil {
		if err := m.Networking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networking")
			}
			return err
		}
	}

	return nil
}

func (m *MultiCluster) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *MultiCluster) validateSharedStorages(formats strfmt.Registry) error {

	if swag.IsZero(m.SharedStorages) { // not required
		return nil
	}

	for i := 0; i < len(m.SharedStorages); i++ {
		if swag.IsZero(m.SharedStorages[i]) { // not required
			continue
		}

		if m.SharedStorages[i] != nil {
			if err := m.SharedStorages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shared_storages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MultiCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MultiCluster) UnmarshalBinary(b []byte) error {
	var res MultiCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MultiClusterLicenseKeys VMware license keys for vSAN
// swagger:model MultiClusterLicenseKeys
type MultiClusterLicenseKeys struct {

	// vsan
	Vsan *VsanLicense `json:"vsan,omitempty"`
}

// Validate validates this multi cluster license keys
func (m *MultiClusterLicenseKeys) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVsan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MultiClusterLicenseKeys) validateVsan(formats strfmt.Registry) error {

	if swag.IsZero(m.Vsan) { // not required
		return nil
	}

	if m.Vsan != nil {
		if err := m.Vsan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys" + "." + "vsan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MultiClusterLicenseKeys) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MultiClusterLicenseKeys) UnmarshalBinary(b []byte) error {
	var res MultiClusterLicenseKeys
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
