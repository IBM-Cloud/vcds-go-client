// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Host host
// swagger:model host
type Host struct {

	// Network domain.
	// Required: true
	Domain *string `json:"domain"`

	// Host name.
	// Required: true
	Hostname *string `json:"hostname"`

	// ID of the host.
	// Required: true
	ID *string `json:"id"`

	// Memory size of the host in GB.
	Memory int64 `json:"memory,omitempty"`

	// OS type of the host, which is 'vsphere'.
	// Enum: [vsphere]
	Os string `json:"os,omitempty"`

	// User password of the host.
	Password string `json:"password,omitempty"`

	// Private IP address of the host.
	PrivateIPAddress string `json:"private_ip_address,omitempty"`

	// Number of processors of the host.
	Processor int64 `json:"processor,omitempty"`

	// Public IP address of the host.
	PublicIPAddress string `json:"public_ip_address,omitempty"`

	// State of the host.
	// Required: true
	State *string `json:"state"`

	// User name of the host.
	User string `json:"user,omitempty"`

	// Whether or not the vSAN disks are compressed.
	VsanCompression bool `json:"vsan_compression,omitempty"`

	// vSphere version.
	VsphereVersion string `json:"vsphere_version,omitempty"`
}

// Validate validates this host
func (m *Host) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Host) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var hostTypeOsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vsphere"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostTypeOsPropEnum = append(hostTypeOsPropEnum, v)
	}
}

const (

	// HostOsVsphere captures enum value "vsphere"
	HostOsVsphere string = "vsphere"
)

// prop value enum
func (m *Host) validateOsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hostTypeOsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Host) validateOs(formats strfmt.Registry) error {

	if swag.IsZero(m.Os) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsEnum("os", "body", m.Os); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Host) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Host) UnmarshalBinary(b []byte) error {
	var res Host
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
