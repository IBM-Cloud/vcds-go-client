// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceInstance service instance
// swagger:model service_instance
type ServiceInstance struct {

	// Creation date and time.
	CreationTime string `json:"creation_time,omitempty"`

	// vCenter Server instance name.
	InstanceName string `json:"instance_name,omitempty"`

	// Service catalog ID.
	// Required: true
	ServiceID *string `json:"service_id"`

	// Unique ID of the service.
	// Required: true
	ServiceInstanceID *string `json:"service_instance_id"`

	// Service full name.
	ServiceName string `json:"service_name,omitempty"`

	// Service status.
	Status string `json:"status,omitempty"`

	// Public variables for a service installation.
	Variables interface{} `json:"variables,omitempty"`
}

// Validate validates this service instance
func (m *ServiceInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceInstance) validateServiceID(formats strfmt.Registry) error {

	if err := validate.Required("service_id", "body", m.ServiceID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceInstance) validateServiceInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("service_instance_id", "body", m.ServiceInstanceID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceInstance) UnmarshalBinary(b []byte) error {
	var res ServiceInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
