// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DefExistingNetworking existing network selections
// swagger:model def_existing_networking
type DefExistingNetworking struct {

	// additional private vlan
	AdditionalPrivateVlan *DefExistingNetworkingAdditionalPrivateVlan `json:"additional_private_vlan,omitempty"`

	// private vlan
	PrivateVlan *DefExistingNetworkingPrivateVlan `json:"private_vlan,omitempty"`

	// public vlan
	PublicVlan *DefExistingNetworkingPublicVlan `json:"public_vlan,omitempty"`
}

// Validate validates this def existing networking
func (m *DefExistingNetworking) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalPrivateVlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateVlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicVlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefExistingNetworking) validateAdditionalPrivateVlan(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalPrivateVlan) { // not required
		return nil
	}

	if m.AdditionalPrivateVlan != nil {
		if err := m.AdditionalPrivateVlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additional_private_vlan")
			}
			return err
		}
	}

	return nil
}

func (m *DefExistingNetworking) validatePrivateVlan(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateVlan) { // not required
		return nil
	}

	if m.PrivateVlan != nil {
		if err := m.PrivateVlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_vlan")
			}
			return err
		}
	}

	return nil
}

func (m *DefExistingNetworking) validatePublicVlan(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicVlan) { // not required
		return nil
	}

	if m.PublicVlan != nil {
		if err := m.PublicVlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("public_vlan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DefExistingNetworking) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefExistingNetworking) UnmarshalBinary(b []byte) error {
	var res DefExistingNetworking
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefExistingNetworkingAdditionalPrivateVlan Data for an existing additional private VLAN to use for vCenter
// swagger:model DefExistingNetworkingAdditionalPrivateVlan
type DefExistingNetworkingAdditionalPrivateVlan struct {

	// id
	ID int64 `json:"id,omitempty"`

	// num
	Num string `json:"num,omitempty"`

	// podname
	Podname string `json:"podname,omitempty"`
}

// Validate validates this def existing networking additional private vlan
func (m *DefExistingNetworkingAdditionalPrivateVlan) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DefExistingNetworkingAdditionalPrivateVlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefExistingNetworkingAdditionalPrivateVlan) UnmarshalBinary(b []byte) error {
	var res DefExistingNetworkingAdditionalPrivateVlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefExistingNetworkingPrivateVlan Data for an existing private VLAN to use for vCenter
// swagger:model DefExistingNetworkingPrivateVlan
type DefExistingNetworkingPrivateVlan struct {

	// id
	ID int64 `json:"id,omitempty"`

	// num
	Num string `json:"num,omitempty"`

	// podname
	Podname string `json:"podname,omitempty"`

	// primary subnet
	PrimarySubnet string `json:"primary_subnet,omitempty"`

	// primary subnet id
	PrimarySubnetID int64 `json:"primary_subnet_id,omitempty"`
}

// Validate validates this def existing networking private vlan
func (m *DefExistingNetworkingPrivateVlan) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DefExistingNetworkingPrivateVlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefExistingNetworkingPrivateVlan) UnmarshalBinary(b []byte) error {
	var res DefExistingNetworkingPrivateVlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefExistingNetworkingPublicVlan Data for an existing public VLAN to use for vCenter
// swagger:model DefExistingNetworkingPublicVlan
type DefExistingNetworkingPublicVlan struct {

	// id
	ID int64 `json:"id,omitempty"`

	// num
	Num string `json:"num,omitempty"`

	// podname
	Podname string `json:"podname,omitempty"`

	// primary subnet
	PrimarySubnet string `json:"primary_subnet,omitempty"`

	// primary subnet id
	PrimarySubnetID int64 `json:"primary_subnet_id,omitempty"`
}

// Validate validates this def existing networking public vlan
func (m *DefExistingNetworkingPublicVlan) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DefExistingNetworkingPublicVlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefExistingNetworkingPublicVlan) UnmarshalBinary(b []byte) error {
	var res DefExistingNetworkingPublicVlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
