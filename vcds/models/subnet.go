// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subnet subnet
// swagger:model subnet
type Subnet struct {

	// List of IP addresses in the subnet.
	// Required: true
	Ips []*NetworkIP `json:"ips"`

	// Link to the subnet.
	// Required: true
	Link *string `json:"link"`

	// Network identifier of the subnet.
	// Required: true
	NetworkIdentifier *string `json:"network_identifier"`

	// Purpose of the subnet.
	// Required: true
	Purpose *string `json:"purpose"`

	// Type of the subnet.
	// Required: true
	SubnetType *string `json:"subnet_type"`
}

// Validate validates this subnet
func (m *Subnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurpose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subnet) validateIps(formats strfmt.Registry) error {

	if err := validate.Required("ips", "body", m.Ips); err != nil {
		return err
	}

	for i := 0; i < len(m.Ips); i++ {
		if swag.IsZero(m.Ips[i]) { // not required
			continue
		}

		if m.Ips[i] != nil {
			if err := m.Ips[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subnet) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateNetworkIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("network_identifier", "body", m.NetworkIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validatePurpose(formats strfmt.Registry) error {

	if err := validate.Required("purpose", "body", m.Purpose); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateSubnetType(formats strfmt.Registry) error {

	if err := validate.Required("subnet_type", "body", m.SubnetType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subnet) UnmarshalBinary(b []byte) error {
	var res Subnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
