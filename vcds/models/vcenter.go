// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vcenter vcenter
// swagger:model vcenter
type Vcenter struct {

	// Creation timestamp in epoch.
	CreatedTime int64 `json:"created_time,omitempty"`

	// Creator of the instance.
	Creator string `json:"creator,omitempty"`

	// Cloud resource name. The unique resource identifier in IBM Cloud.
	Crn string `json:"crn,omitempty"`

	// Current version of the instance.
	CurrentVersion string `json:"current_version,omitempty"`

	// Domain types.
	// Enum: [primary secondary]
	DomainType string `json:"domain_type,omitempty"`

	// Unique ID of the vCenter Server instance.
	// Required: true
	ID *string `json:"id"`

	// Initial version of the instance.
	InitialVersion string `json:"initial_version,omitempty"`

	// Primary data center location of the instance.
	Location string `json:"location,omitempty"`

	// vCenter Server instance name.
	// Required: true
	Name *string `json:"name"`

	// Resource group ID. To list resource groups, see the Resource Manager API for IBM Cloud. By default, the default resource group ID in the account is used.
	ResourceGroupID string `json:"resource_group_id,omitempty"`

	// vCenter Server instance status.
	Status string `json:"status,omitempty"`
}

// Validate validates this vcenter
func (m *Vcenter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomainType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vcenterTypeDomainTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary","secondary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vcenterTypeDomainTypePropEnum = append(vcenterTypeDomainTypePropEnum, v)
	}
}

const (

	// VcenterDomainTypePrimary captures enum value "primary"
	VcenterDomainTypePrimary string = "primary"

	// VcenterDomainTypeSecondary captures enum value "secondary"
	VcenterDomainTypeSecondary string = "secondary"
)

// prop value enum
func (m *Vcenter) validateDomainTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vcenterTypeDomainTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Vcenter) validateDomainType(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDomainTypeEnum("domain_type", "body", m.DomainType); err != nil {
		return err
	}

	return nil
}

func (m *Vcenter) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Vcenter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Vcenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vcenter) UnmarshalBinary(b []byte) error {
	var res Vcenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
