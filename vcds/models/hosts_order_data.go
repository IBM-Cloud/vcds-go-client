// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostsOrderData hosts order data
// swagger:model hosts_order_data
type HostsOrderData struct {

	// customized hardware
	CustomizedHardware *CustomizedHardware `json:"customized_hardware,omitempty"`

	// Whether hosts should be billed hourly or monthly (default)
	Hourly *bool `json:"hourly,omitempty"`

	// Whether to put the new hosts into maintenance mode after they are added.
	MaintenanceMode *bool `json:"maintenance_mode,omitempty"`

	// networking
	Networking *DefExistingNetworking `json:"networking,omitempty"`

	// Number of new hosts to be added.
	// Required: true
	Quantity *int64 `json:"quantity"`

	// The template ID that maps to a preconfigured hardware specification to be ordered. To see supported templates, use the `GET /v2/templates` API. To customize your hardware configuration, use `customized_hardware`. This will be ignored if `customized_hardware` is also specified. If using hourly packages, this must be defined along with the hourly flag
	TemplateID string `json:"template_id,omitempty"`

	// The vSphere version for the host OS
	VsphereVersion string `json:"vsphere_version,omitempty"`
}

// Validate validates this hosts order data
func (m *HostsOrderData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomizedHardware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostsOrderData) validateCustomizedHardware(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomizedHardware) { // not required
		return nil
	}

	if m.CustomizedHardware != nil {
		if err := m.CustomizedHardware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customized_hardware")
			}
			return err
		}
	}

	return nil
}

func (m *HostsOrderData) validateNetworking(formats strfmt.Registry) error {

	if swag.IsZero(m.Networking) { // not required
		return nil
	}

	if m.Networking != nil {
		if err := m.Networking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networking")
			}
			return err
		}
	}

	return nil
}

func (m *HostsOrderData) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostsOrderData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostsOrderData) UnmarshalBinary(b []byte) error {
	var res HostsOrderData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
