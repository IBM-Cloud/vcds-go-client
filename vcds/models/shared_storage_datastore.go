// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SharedStorageDatastore A shared storage datastore configuration.
// swagger:model shared_storage_datastore
type SharedStorageDatastore struct {

	// Datastore name.
	// Required: true
	DatastoreName *string `json:"datastore_name"`

	// IOPS tier.
	Iops string `json:"iops,omitempty"`

	// Size tier.
	Size string `json:"size,omitempty"`

	// Storage resource unique ID from the infrastructure service.
	// Required: true
	StorageID *string `json:"storage_id"`

	// Volume size of each storage.
	Volume int64 `json:"volume,omitempty"`
}

// Validate validates this shared storage datastore
func (m *SharedStorageDatastore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatastoreName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SharedStorageDatastore) validateDatastoreName(formats strfmt.Registry) error {

	if err := validate.Required("datastore_name", "body", m.DatastoreName); err != nil {
		return err
	}

	return nil
}

func (m *SharedStorageDatastore) validateStorageID(formats strfmt.Registry) error {

	if err := validate.Required("storage_id", "body", m.StorageID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SharedStorageDatastore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SharedStorageDatastore) UnmarshalBinary(b []byte) error {
	var res SharedStorageDatastore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
