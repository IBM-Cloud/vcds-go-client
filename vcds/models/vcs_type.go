// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// VcsType Networking solution type. Use `vcs_nsx_t` to deploy a vCenter Server with NSX-T instance.
// swagger:model vcs_type
type VcsType string

const (

	// VcsTypeVcs captures enum value "vcs"
	VcsTypeVcs VcsType = "vcs"

	// VcsTypeVcsNsxT captures enum value "vcs_nsx_t"
	VcsTypeVcsNsxT VcsType = "vcs_nsx_t"

	// VcsTypeVcsEdge captures enum value "vcs_edge"
	VcsTypeVcsEdge VcsType = "vcs_edge"

	// VcsTypeVcsNsxTTrial captures enum value "vcs_nsx_t_trial"
	VcsTypeVcsNsxTTrial VcsType = "vcs_nsx_t_trial"
)

// for schema
var vcsTypeEnum []interface{}

func init() {
	var res []VcsType
	if err := json.Unmarshal([]byte(`["vcs","vcs_nsx_t","vcs_edge","vcs_nsx_t_trial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vcsTypeEnum = append(vcsTypeEnum, v)
	}
}

func (m VcsType) validateVcsTypeEnum(path, location string, value VcsType) error {
	if err := validate.Enum(path, location, value, vcsTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this vcs type
func (m VcsType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVcsTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
