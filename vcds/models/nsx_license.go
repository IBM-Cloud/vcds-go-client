// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NsxLicense vCenter license key configuration.
// swagger:model nsx_license
type NsxLicense struct {

	// Bring your own license key. If not provided or empty, license key is included in the order.
	Key string `json:"key,omitempty"`

	// For non-BYOL, specify which type of NSX license you want to order. Ignored when `key` is provided.
	// Enum: [base advanced enterprise]
	LicenseType *string `json:"license_type,omitempty"`
}

// Validate validates this nsx license
func (m *NsxLicense) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nsxLicenseTypeLicenseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["base","advanced","enterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nsxLicenseTypeLicenseTypePropEnum = append(nsxLicenseTypeLicenseTypePropEnum, v)
	}
}

const (

	// NsxLicenseLicenseTypeBase captures enum value "base"
	NsxLicenseLicenseTypeBase string = "base"

	// NsxLicenseLicenseTypeAdvanced captures enum value "advanced"
	NsxLicenseLicenseTypeAdvanced string = "advanced"

	// NsxLicenseLicenseTypeEnterprise captures enum value "enterprise"
	NsxLicenseLicenseTypeEnterprise string = "enterprise"
)

// prop value enum
func (m *NsxLicense) validateLicenseTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nsxLicenseTypeLicenseTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NsxLicense) validateLicenseType(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseTypeEnum("license_type", "body", *m.LicenseType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NsxLicense) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NsxLicense) UnmarshalBinary(b []byte) error {
	var res NsxLicense
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
