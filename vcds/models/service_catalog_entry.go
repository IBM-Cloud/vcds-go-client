// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceCatalogEntry service catalog entry
// swagger:model service_catalog_entry
type ServiceCatalogEntry struct {

	// Description of the service.
	// Required: true
	Description *string `json:"description"`

	// Full name of service.
	// Required: true
	Name *string `json:"name"`

	// Service catalog ID.
	// Required: true
	ServiceID *string `json:"service_id"`

	// Service version.
	// Required: true
	ServiceVersion *string `json:"service_version"`
}

// Validate validates this service catalog entry
func (m *ServiceCatalogEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCatalogEntry) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCatalogEntry) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCatalogEntry) validateServiceID(formats strfmt.Registry) error {

	if err := validate.Required("service_id", "body", m.ServiceID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCatalogEntry) validateServiceVersion(formats strfmt.Registry) error {

	if err := validate.Required("service_version", "body", m.ServiceVersion); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCatalogEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCatalogEntry) UnmarshalBinary(b []byte) error {
	var res ServiceCatalogEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
