// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VcenterOrderData vcenter order data
// swagger:model vcenter_order_data
type VcenterOrderData struct {

	// Name of the default cluster.
	// Max Length: 30
	DefaultClusterName *string `json:"default_cluster_name,omitempty"`

	// Active Directory DNS type. Valid values are "vsi" or "ha_vm".
	// Enum: [vsi ha_vm]
	DNSType *string `json:"dns_type,omitempty"`

	// Domain type. "primary" is the only supported value currently.
	// Enum: [primary]
	DomainType *string `json:"domain_type,omitempty"`

	// hardware
	// Required: true
	Hardware *Hardware `json:"hardware"`

	// Hostname prefix of the VMware vSphere hosts.
	HostPrefix *string `json:"host_prefix,omitempty"`

	// Whether hosts should be billed hourly or monthly (default). Currently for AT&T only
	Hourly *bool `json:"hourly,omitempty"`

	// license keys
	LicenseKeys *VcenterOrderDataLicenseKeys `json:"license_keys,omitempty"`

	// Data center location. To list available data center locations, use the `GET /v2/locations` API.
	// Required: true
	Location *string `json:"location"`

	// New VMware instance name that must be unique in your account.
	// Required: true
	// Max Length: 10
	Name *string `json:"name"`

	// network
	Network *NetworkConfig `json:"network,omitempty"`

	// networking
	Networking *DefExistingNetworking `json:"networking,omitempty"`

	// Resource group ID. To list resource groups, see the Resource Manager API for IBM Cloud. By default, the default resource group ID in the account is used.
	ResourceGroup string `json:"resource_group,omitempty"`

	// Root domain of the VMware vSphere hosts.
	// Required: true
	RootDomain *string `json:"root_domain"`

	// list of services to be added on bringup.
	Services []*ServiceInfo `json:"services"`

	// List of shared storage configurations.
	SharedStorages []*SharedStorageConfig `json:"shared_storages"`

	// Subdomain of the VMware vSphere hosts.
	Subdomain *string `json:"subdomain,omitempty"`

	// vcs type
	VcsType VcsType `json:"vcs_type,omitempty"`

	// vSphere version. To list supported vSphere versions, use the `GET /v2/vsphere_versions` API. Use "latest" to specify the latest supported vSphere version.
	VsphereVersion *string `json:"vsphere_version,omitempty"`
}

// Validate validates this vcenter order data
func (m *VcenterOrderData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedStorages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VcenterOrderData) validateDefaultClusterName(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultClusterName) { // not required
		return nil
	}

	if err := validate.MaxLength("default_cluster_name", "body", string(*m.DefaultClusterName), 30); err != nil {
		return err
	}

	return nil
}

var vcenterOrderDataTypeDNSTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vsi","ha_vm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vcenterOrderDataTypeDNSTypePropEnum = append(vcenterOrderDataTypeDNSTypePropEnum, v)
	}
}

const (

	// VcenterOrderDataDNSTypeVsi captures enum value "vsi"
	VcenterOrderDataDNSTypeVsi string = "vsi"

	// VcenterOrderDataDNSTypeHaVM captures enum value "ha_vm"
	VcenterOrderDataDNSTypeHaVM string = "ha_vm"
)

// prop value enum
func (m *VcenterOrderData) validateDNSTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vcenterOrderDataTypeDNSTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VcenterOrderData) validateDNSType(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDNSTypeEnum("dns_type", "body", *m.DNSType); err != nil {
		return err
	}

	return nil
}

var vcenterOrderDataTypeDomainTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vcenterOrderDataTypeDomainTypePropEnum = append(vcenterOrderDataTypeDomainTypePropEnum, v)
	}
}

const (

	// VcenterOrderDataDomainTypePrimary captures enum value "primary"
	VcenterOrderDataDomainTypePrimary string = "primary"
)

// prop value enum
func (m *VcenterOrderData) validateDomainTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vcenterOrderDataTypeDomainTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VcenterOrderData) validateDomainType(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDomainTypeEnum("domain_type", "body", *m.DomainType); err != nil {
		return err
	}

	return nil
}

func (m *VcenterOrderData) validateHardware(formats strfmt.Registry) error {

	if err := validate.Required("hardware", "body", m.Hardware); err != nil {
		return err
	}

	if m.Hardware != nil {
		if err := m.Hardware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware")
			}
			return err
		}
	}

	return nil
}

func (m *VcenterOrderData) validateLicenseKeys(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseKeys) { // not required
		return nil
	}

	if m.LicenseKeys != nil {
		if err := m.LicenseKeys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys")
			}
			return err
		}
	}

	return nil
}

func (m *VcenterOrderData) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *VcenterOrderData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 10); err != nil {
		return err
	}

	return nil
}

func (m *VcenterOrderData) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *VcenterOrderData) validateNetworking(formats strfmt.Registry) error {

	if swag.IsZero(m.Networking) { // not required
		return nil
	}

	if m.Networking != nil {
		if err := m.Networking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networking")
			}
			return err
		}
	}

	return nil
}

func (m *VcenterOrderData) validateRootDomain(formats strfmt.Registry) error {

	if err := validate.Required("root_domain", "body", m.RootDomain); err != nil {
		return err
	}

	return nil
}

func (m *VcenterOrderData) validateServices(formats strfmt.Registry) error {

	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VcenterOrderData) validateSharedStorages(formats strfmt.Registry) error {

	if swag.IsZero(m.SharedStorages) { // not required
		return nil
	}

	for i := 0; i < len(m.SharedStorages); i++ {
		if swag.IsZero(m.SharedStorages[i]) { // not required
			continue
		}

		if m.SharedStorages[i] != nil {
			if err := m.SharedStorages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shared_storages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VcenterOrderData) validateVcsType(formats strfmt.Registry) error {

	if swag.IsZero(m.VcsType) { // not required
		return nil
	}

	if err := m.VcsType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vcs_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VcenterOrderData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VcenterOrderData) UnmarshalBinary(b []byte) error {
	var res VcenterOrderData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VcenterOrderDataLicenseKeys VMware license keys configuration.
// swagger:model VcenterOrderDataLicenseKeys
type VcenterOrderDataLicenseKeys struct {

	// nsx
	Nsx *NsxLicense `json:"nsx,omitempty"`

	// vcenter
	Vcenter *VcenterLicense `json:"vcenter,omitempty"`

	// vsan
	Vsan *VsanLicense `json:"vsan,omitempty"`

	// vsphere
	Vsphere *VsphereLicense `json:"vsphere,omitempty"`
}

// Validate validates this vcenter order data license keys
func (m *VcenterOrderDataLicenseKeys) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNsx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VcenterOrderDataLicenseKeys) validateNsx(formats strfmt.Registry) error {

	if swag.IsZero(m.Nsx) { // not required
		return nil
	}

	if m.Nsx != nil {
		if err := m.Nsx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys" + "." + "nsx")
			}
			return err
		}
	}

	return nil
}

func (m *VcenterOrderDataLicenseKeys) validateVcenter(formats strfmt.Registry) error {

	if swag.IsZero(m.Vcenter) { // not required
		return nil
	}

	if m.Vcenter != nil {
		if err := m.Vcenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys" + "." + "vcenter")
			}
			return err
		}
	}

	return nil
}

func (m *VcenterOrderDataLicenseKeys) validateVsan(formats strfmt.Registry) error {

	if swag.IsZero(m.Vsan) { // not required
		return nil
	}

	if m.Vsan != nil {
		if err := m.Vsan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys" + "." + "vsan")
			}
			return err
		}
	}

	return nil
}

func (m *VcenterOrderDataLicenseKeys) validateVsphere(formats strfmt.Registry) error {

	if swag.IsZero(m.Vsphere) { // not required
		return nil
	}

	if m.Vsphere != nil {
		if err := m.Vsphere.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys" + "." + "vsphere")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VcenterOrderDataLicenseKeys) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VcenterOrderDataLicenseKeys) UnmarshalBinary(b []byte) error {
	var res VcenterOrderDataLicenseKeys
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
