// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vlan vlan
// swagger:model vlan
type Vlan struct {

	// Link to the VLAN.
	// Required: true
	Link *string `json:"link"`

	// Data Center location of the specified VLAN.
	// Required: true
	Location *string `json:"location"`

	// Internal ID of the VLAN.
	// Required: true
	Name *string `json:"name"`

	// VLAN number.
	// Required: true
	Number *int64 `json:"number"`

	// Primary router that the VLAN is associated with.
	// Required: true
	PrimaryRouter *string `json:"primary_router"`

	// Purpose of the VLAN.
	// Required: true
	Purpose *string `json:"purpose"`

	// List of subnets in the specified VLAN.
	// Required: true
	Subnets []*Subnet `json:"subnets"`
}

// Validate validates this vlan
func (m *Vlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryRouter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurpose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vlan) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *Vlan) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *Vlan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Vlan) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *Vlan) validatePrimaryRouter(formats strfmt.Registry) error {

	if err := validate.Required("primary_router", "body", m.PrimaryRouter); err != nil {
		return err
	}

	return nil
}

func (m *Vlan) validatePurpose(formats strfmt.Registry) error {

	if err := validate.Required("purpose", "body", m.Purpose); err != nil {
		return err
	}

	return nil
}

func (m *Vlan) validateSubnets(formats strfmt.Registry) error {

	if err := validate.Required("subnets", "body", m.Subnets); err != nil {
		return err
	}

	for i := 0; i < len(m.Subnets); i++ {
		if swag.IsZero(m.Subnets[i]) { // not required
			continue
		}

		if m.Subnets[i] != nil {
			if err := m.Subnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Vlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vlan) UnmarshalBinary(b []byte) error {
	var res Vlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
