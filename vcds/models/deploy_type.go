// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// DeployType Deployment type. Use `mcv` to deploy a VMware Mission Critical Workloads instance.
// swagger:model deploy_type
type DeployType string

const (

	// DeployTypeMcv captures enum value "mcv"
	DeployTypeMcv DeployType = "mcv"

	// DeployTypeVcs captures enum value "vcs"
	DeployTypeVcs DeployType = "vcs"

	// DeployTypeVss captures enum value "vss"
	DeployTypeVss DeployType = "vss"

	// DeployTypeStub captures enum value "stub"
	DeployTypeStub DeployType = "stub"
)

// for schema
var deployTypeEnum []interface{}

func init() {
	var res []DeployType
	if err := json.Unmarshal([]byte(`["mcv","vcs","vss","stub"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deployTypeEnum = append(deployTypeEnum, v)
	}
}

func (m DeployType) validateDeployTypeEnum(path, location string, value DeployType) error {
	if err := validate.Enum(path, location, value, deployTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this deploy type
func (m DeployType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeployTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
