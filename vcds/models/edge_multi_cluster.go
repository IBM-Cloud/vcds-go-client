// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeMultiCluster Edge cluster configuration.
// swagger:model edge_multi_cluster
type EdgeMultiCluster struct {

	// New cluster name that must be unique for the specified instance.
	// Required: true
	// Max Length: 30
	ClusterName *string `json:"cluster_name"`

	// customized hardware
	// Required: true
	CustomizedHardware *EdgeCustomizedHardware `json:"customized_hardware"`

	// Data center location.
	// Required: true
	Location *string `json:"location"`

	// Number of hardware servers.
	// Required: true
	Quantity *int64 `json:"quantity"`

	// The template ID that maps to a preconfigured hardware specification to be ordered. To see supported templates, use the `GET /v2/templates` API.
	TemplateID string `json:"template_id,omitempty"`
}

// Validate validates this edge multi cluster
func (m *EdgeMultiCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomizedHardware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeMultiCluster) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_name", "body", m.ClusterName); err != nil {
		return err
	}

	if err := validate.MaxLength("cluster_name", "body", string(*m.ClusterName), 30); err != nil {
		return err
	}

	return nil
}

func (m *EdgeMultiCluster) validateCustomizedHardware(formats strfmt.Registry) error {

	if err := validate.Required("customized_hardware", "body", m.CustomizedHardware); err != nil {
		return err
	}

	if m.CustomizedHardware != nil {
		if err := m.CustomizedHardware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customized_hardware")
			}
			return err
		}
	}

	return nil
}

func (m *EdgeMultiCluster) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *EdgeMultiCluster) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeMultiCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeMultiCluster) UnmarshalBinary(b []byte) error {
	var res EdgeMultiCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
