// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DefVsphereVersions The list of supported vSphere versions in JSON format.
// swagger:model def_vsphere_versions
type DefVsphereVersions struct {

	// The list of supported vSphere versions.
	// Required: true
	VsphereVersions []*DefVsphereVersionsVsphereVersionsItems0 `json:"vsphere_versions"`
}

// Validate validates this def vsphere versions
func (m *DefVsphereVersions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVsphereVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefVsphereVersions) validateVsphereVersions(formats strfmt.Registry) error {

	if err := validate.Required("vsphere_versions", "body", m.VsphereVersions); err != nil {
		return err
	}

	for i := 0; i < len(m.VsphereVersions); i++ {
		if swag.IsZero(m.VsphereVersions[i]) { // not required
			continue
		}

		if m.VsphereVersions[i] != nil {
			if err := m.VsphereVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vsphere_versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DefVsphereVersions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefVsphereVersions) UnmarshalBinary(b []byte) error {
	var res DefVsphereVersions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DefVsphereVersionsVsphereVersionsItems0 A specified vSphere version.
// swagger:model DefVsphereVersionsVsphereVersionsItems0
type DefVsphereVersionsVsphereVersionsItems0 struct {

	// vSphere version.
	Version string `json:"version,omitempty"`
}

// Validate validates this def vsphere versions vsphere versions items0
func (m *DefVsphereVersionsVsphereVersionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DefVsphereVersionsVsphereVersionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefVsphereVersionsVsphereVersionsItems0) UnmarshalBinary(b []byte) error {
	var res DefVsphereVersionsVsphereVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
