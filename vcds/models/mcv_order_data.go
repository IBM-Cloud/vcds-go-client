// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// McvOrderData mcv order data
// swagger:model mcv_order_data
type McvOrderData struct {

	// deploy type
	// Required: true
	DeployType DeployType `json:"deploy_type"`

	// Active Directory DNS type. Valid values are "vsi" or "ha_vm".
	// Enum: [vsi ha_vm]
	DNSType *string `json:"dns_type,omitempty"`

	// Domain type. "primary" is the only supported value currently.
	// Enum: [primary]
	DomainType *string `json:"domain_type,omitempty"`

	// Hostname prefix of the VMware vSphere hosts.
	HostPrefix *string `json:"host_prefix,omitempty"`

	// license keys
	LicenseKeys *McvOrderDataLicenseKeys `json:"license_keys,omitempty"`

	// management
	// Required: true
	Management *McvMgmt `json:"management"`

	// MZR location. Choose one from ['Dallas', 'Washington', 'Sydney', 'Frankfurt', 'Tokyo', 'London']
	// Required: true
	MzrLocation *string `json:"mzr_location"`

	// New VMware instance name that must be unique in your account.
	// Required: true
	// Max Length: 10
	Name *string `json:"name"`

	// resource
	// Required: true
	Resource *Resource `json:"resource"`

	// Root domain of the VMware vSphere hosts.
	// Required: true
	RootDomain *string `json:"root_domain"`

	// Subdomain of the VMware vSphere hosts.
	Subdomain *string `json:"subdomain,omitempty"`

	// vSphere version. To list supported vSphere versions, use the `GET /v2/vsphere_versions` API. Use "latest" to specify the latest supported vSphere version.
	VsphereVersion *string `json:"vsphere_version,omitempty"`

	// witness
	// Required: true
	Witness *Witness `json:"witness"`
}

// Validate validates this mcv order data
func (m *McvOrderData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMzrLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitness(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *McvOrderData) validateDeployType(formats strfmt.Registry) error {

	if err := m.DeployType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deploy_type")
		}
		return err
	}

	return nil
}

var mcvOrderDataTypeDNSTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vsi","ha_vm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mcvOrderDataTypeDNSTypePropEnum = append(mcvOrderDataTypeDNSTypePropEnum, v)
	}
}

const (

	// McvOrderDataDNSTypeVsi captures enum value "vsi"
	McvOrderDataDNSTypeVsi string = "vsi"

	// McvOrderDataDNSTypeHaVM captures enum value "ha_vm"
	McvOrderDataDNSTypeHaVM string = "ha_vm"
)

// prop value enum
func (m *McvOrderData) validateDNSTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mcvOrderDataTypeDNSTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *McvOrderData) validateDNSType(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDNSTypeEnum("dns_type", "body", *m.DNSType); err != nil {
		return err
	}

	return nil
}

var mcvOrderDataTypeDomainTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mcvOrderDataTypeDomainTypePropEnum = append(mcvOrderDataTypeDomainTypePropEnum, v)
	}
}

const (

	// McvOrderDataDomainTypePrimary captures enum value "primary"
	McvOrderDataDomainTypePrimary string = "primary"
)

// prop value enum
func (m *McvOrderData) validateDomainTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mcvOrderDataTypeDomainTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *McvOrderData) validateDomainType(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDomainTypeEnum("domain_type", "body", *m.DomainType); err != nil {
		return err
	}

	return nil
}

func (m *McvOrderData) validateLicenseKeys(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseKeys) { // not required
		return nil
	}

	if m.LicenseKeys != nil {
		if err := m.LicenseKeys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys")
			}
			return err
		}
	}

	return nil
}

func (m *McvOrderData) validateManagement(formats strfmt.Registry) error {

	if err := validate.Required("management", "body", m.Management); err != nil {
		return err
	}

	if m.Management != nil {
		if err := m.Management.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management")
			}
			return err
		}
	}

	return nil
}

func (m *McvOrderData) validateMzrLocation(formats strfmt.Registry) error {

	if err := validate.Required("mzr_location", "body", m.MzrLocation); err != nil {
		return err
	}

	return nil
}

func (m *McvOrderData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 10); err != nil {
		return err
	}

	return nil
}

func (m *McvOrderData) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

func (m *McvOrderData) validateRootDomain(formats strfmt.Registry) error {

	if err := validate.Required("root_domain", "body", m.RootDomain); err != nil {
		return err
	}

	return nil
}

func (m *McvOrderData) validateWitness(formats strfmt.Registry) error {

	if err := validate.Required("witness", "body", m.Witness); err != nil {
		return err
	}

	if m.Witness != nil {
		if err := m.Witness.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witness")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *McvOrderData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *McvOrderData) UnmarshalBinary(b []byte) error {
	var res McvOrderData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// McvOrderDataLicenseKeys VMware license keys configuration.
// swagger:model McvOrderDataLicenseKeys
type McvOrderDataLicenseKeys struct {

	// nsx
	Nsx *NsxLicense `json:"nsx,omitempty"`

	// vcenter
	Vcenter *VcenterLicense `json:"vcenter,omitempty"`

	// vsan
	Vsan *VsanLicense `json:"vsan,omitempty"`

	// vsphere
	Vsphere *VsphereLicense `json:"vsphere,omitempty"`
}

// Validate validates this mcv order data license keys
func (m *McvOrderDataLicenseKeys) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNsx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVsphere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *McvOrderDataLicenseKeys) validateNsx(formats strfmt.Registry) error {

	if swag.IsZero(m.Nsx) { // not required
		return nil
	}

	if m.Nsx != nil {
		if err := m.Nsx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys" + "." + "nsx")
			}
			return err
		}
	}

	return nil
}

func (m *McvOrderDataLicenseKeys) validateVcenter(formats strfmt.Registry) error {

	if swag.IsZero(m.Vcenter) { // not required
		return nil
	}

	if m.Vcenter != nil {
		if err := m.Vcenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys" + "." + "vcenter")
			}
			return err
		}
	}

	return nil
}

func (m *McvOrderDataLicenseKeys) validateVsan(formats strfmt.Registry) error {

	if swag.IsZero(m.Vsan) { // not required
		return nil
	}

	if m.Vsan != nil {
		if err := m.Vsan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys" + "." + "vsan")
			}
			return err
		}
	}

	return nil
}

func (m *McvOrderDataLicenseKeys) validateVsphere(formats strfmt.Registry) error {

	if swag.IsZero(m.Vsphere) { // not required
		return nil
	}

	if m.Vsphere != nil {
		if err := m.Vsphere.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_keys" + "." + "vsphere")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *McvOrderDataLicenseKeys) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *McvOrderDataLicenseKeys) UnmarshalBinary(b []byte) error {
	var res McvOrderDataLicenseKeys
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
